//
// taxonpathType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class taxonpathType : Altova.Node
	{
		#region Forward constructors
		public taxonpathType() : base() { SetCollectionParents(); }
		public taxonpathType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public taxonpathType(XmlNode node) : base(node) { SetCollectionParents(); }
		public taxonpathType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source", i);
				InternalAdjustPrefix(DOMNode, true);
				new sourceType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", i);
				InternalAdjustPrefix(DOMNode, true);
				new taxonType(DOMNode).AdjustPrefix();
			}
		}


		#region source accessor methods
		public int GetsourceMinCount()
		{
			return 0;
		}

		public int sourceMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetsourceMaxCount()
		{
			return 1;
		}

		public int sourceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsourceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source");
		}

		public int sourceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source");
			}
		}

		public bool Hassource()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source");
		}

		public sourceType GetsourceAt(int index)
		{
			return new sourceType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source", index));
		}

		public sourceType Getsource()
		{
			return GetsourceAt(0);
		}

		public sourceType source
		{
			get
			{
				return GetsourceAt(0);
			}
		}

		public void RemovesourceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source", index);
		}

		public void Removesource()
		{
			while (Hassource())
				RemovesourceAt(0);
		}

		public void Addsource(sourceType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source", newValue);
		}

		public void InsertsourceAt(sourceType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source", index, newValue);
		}

		public void ReplacesourceAt(sourceType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "source", index, newValue);
		}
		#endregion // source accessor methods

		#region source collection
        public sourceCollection	Mysources = new sourceCollection( );

        public class sourceCollection: IEnumerable
        {
            taxonpathType parent;
            public taxonpathType Parent
			{
				set
				{
					parent = value;
				}
			}
			public sourceEnumerator GetEnumerator() 
			{
				return new sourceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class sourceEnumerator: IEnumerator 
        {
			int nIndex;
			taxonpathType parent;
			public sourceEnumerator(taxonpathType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.sourceCount );
			}
			public sourceType  Current 
			{
				get 
				{
					return(parent.GetsourceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // source collection

		#region taxon accessor methods
		public int GettaxonMinCount()
		{
			return 0;
		}

		public int taxonMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GettaxonMaxCount()
		{
			return 1;
		}

		public int taxonMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettaxonCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
		}

		public int taxonCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
			}
		}

		public bool Hastaxon()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
		}

		public taxonType GettaxonAt(int index)
		{
			return new taxonType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index));
		}

		public taxonType Gettaxon()
		{
			return GettaxonAt(0);
		}

		public taxonType taxon
		{
			get
			{
				return GettaxonAt(0);
			}
		}

		public void RemovetaxonAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index);
		}

		public void Removetaxon()
		{
			while (Hastaxon())
				RemovetaxonAt(0);
		}

		public void Addtaxon(taxonType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", newValue);
		}

		public void InserttaxonAt(taxonType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index, newValue);
		}

		public void ReplacetaxonAt(taxonType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index, newValue);
		}
		#endregion // taxon accessor methods

		#region taxon collection
        public taxonCollection	Mytaxons = new taxonCollection( );

        public class taxonCollection: IEnumerable
        {
            taxonpathType parent;
            public taxonpathType Parent
			{
				set
				{
					parent = value;
				}
			}
			public taxonEnumerator GetEnumerator() 
			{
				return new taxonEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class taxonEnumerator: IEnumerator 
        {
			int nIndex;
			taxonpathType parent;
			public taxonEnumerator(taxonpathType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.taxonCount );
			}
			public taxonType  Current 
			{
				get 
				{
					return(parent.GettaxonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // taxon collection

        private void SetCollectionParents()
        {
            Mysources.Parent = this; 
            Mytaxons.Parent = this; 
	}
}
}
