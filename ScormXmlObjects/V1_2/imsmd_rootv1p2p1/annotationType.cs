//
// annotationType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class annotationType : Altova.Node
	{
		#region Forward constructors
		public annotationType() : base() { SetCollectionParents(); }
		public annotationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public annotationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public annotationType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person", i);
				InternalAdjustPrefix(DOMNode, true);
				new personType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date", i);
				InternalAdjustPrefix(DOMNode, true);
				new dateType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", i);
				InternalAdjustPrefix(DOMNode, true);
				new descriptionType(DOMNode).AdjustPrefix();
			}
		}


		#region person accessor methods
		public int GetpersonMinCount()
		{
			return 0;
		}

		public int personMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetpersonMaxCount()
		{
			return 1;
		}

		public int personMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetpersonCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person");
		}

		public int personCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person");
			}
		}

		public bool Hasperson()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person");
		}

		public personType GetpersonAt(int index)
		{
			return new personType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person", index));
		}

		public personType Getperson()
		{
			return GetpersonAt(0);
		}

		public personType person
		{
			get
			{
				return GetpersonAt(0);
			}
		}

		public void RemovepersonAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person", index);
		}

		public void Removeperson()
		{
			while (Hasperson())
				RemovepersonAt(0);
		}

		public void Addperson(personType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person", newValue);
		}

		public void InsertpersonAt(personType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person", index, newValue);
		}

		public void ReplacepersonAt(personType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "person", index, newValue);
		}
		#endregion // person accessor methods

		#region person collection
        public personCollection	Mypersons = new personCollection( );

        public class personCollection: IEnumerable
        {
            annotationType parent;
            public annotationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public personEnumerator GetEnumerator() 
			{
				return new personEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class personEnumerator: IEnumerator 
        {
			int nIndex;
			annotationType parent;
			public personEnumerator(annotationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.personCount );
			}
			public personType  Current 
			{
				get 
				{
					return(parent.GetpersonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // person collection

		#region date accessor methods
		public int GetdateMinCount()
		{
			return 0;
		}

		public int dateMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdateMaxCount()
		{
			return 1;
		}

		public int dateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdateCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date");
		}

		public int dateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date");
			}
		}

		public bool Hasdate()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date");
		}

		public dateType GetdateAt(int index)
		{
			return new dateType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date", index));
		}

		public dateType Getdate()
		{
			return GetdateAt(0);
		}

		public dateType date
		{
			get
			{
				return GetdateAt(0);
			}
		}

		public void RemovedateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date", index);
		}

		public void Removedate()
		{
			while (Hasdate())
				RemovedateAt(0);
		}

		public void Adddate(dateType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date", newValue);
		}

		public void InsertdateAt(dateType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date", index, newValue);
		}

		public void ReplacedateAt(dateType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "date", index, newValue);
		}
		#endregion // date accessor methods

		#region date collection
        public dateCollection	Mydates = new dateCollection( );

        public class dateCollection: IEnumerable
        {
            annotationType parent;
            public annotationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public dateEnumerator GetEnumerator() 
			{
				return new dateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class dateEnumerator: IEnumerator 
        {
			int nIndex;
			annotationType parent;
			public dateEnumerator(annotationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.dateCount );
			}
			public dateType  Current 
			{
				get 
				{
					return(parent.GetdateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // date collection

		#region description accessor methods
		public int GetdescriptionMinCount()
		{
			return 0;
		}

		public int descriptionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdescriptionMaxCount()
		{
			return 1;
		}

		public int descriptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdescriptionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
		}

		public int descriptionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
			}
		}

		public bool Hasdescription()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
		}

		public descriptionType GetdescriptionAt(int index)
		{
			return new descriptionType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index));
		}

		public descriptionType Getdescription()
		{
			return GetdescriptionAt(0);
		}

		public descriptionType description
		{
			get
			{
				return GetdescriptionAt(0);
			}
		}

		public void RemovedescriptionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index);
		}

		public void Removedescription()
		{
			while (Hasdescription())
				RemovedescriptionAt(0);
		}

		public void Adddescription(descriptionType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", newValue);
		}

		public void InsertdescriptionAt(descriptionType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index, newValue);
		}

		public void ReplacedescriptionAt(descriptionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index, newValue);
		}
		#endregion // description accessor methods

		#region description collection
        public descriptionCollection	Mydescriptions = new descriptionCollection( );

        public class descriptionCollection: IEnumerable
        {
            annotationType parent;
            public annotationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public descriptionEnumerator GetEnumerator() 
			{
				return new descriptionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class descriptionEnumerator: IEnumerator 
        {
			int nIndex;
			annotationType parent;
			public descriptionEnumerator(annotationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.descriptionCount );
			}
			public descriptionType  Current 
			{
				get 
				{
					return(parent.GetdescriptionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // description collection

        private void SetCollectionParents()
        {
            Mypersons.Parent = this; 
            Mydates.Parent = this; 
            Mydescriptions.Parent = this; 
	}
}
}
