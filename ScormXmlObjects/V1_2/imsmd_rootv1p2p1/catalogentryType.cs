//
// catalogentryType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class catalogentryType : Altova.Node
	{
		#region Forward constructors
		public catalogentryType() : base() { SetCollectionParents(); }
		public catalogentryType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public catalogentryType(XmlNode node) : base(node) { SetCollectionParents(); }
		public catalogentryType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", i);
				InternalAdjustPrefix(DOMNode, true);
				new entryType(DOMNode).AdjustPrefix();
			}
		}


		#region catalog accessor methods
		public int GetcatalogMinCount()
		{
			return 1;
		}

		public int catalogMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcatalogMaxCount()
		{
			return 1;
		}

		public int catalogMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcatalogCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog");
		}

		public int catalogCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog");
			}
		}

		public bool Hascatalog()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog");
		}

		public catalogType GetcatalogAt(int index)
		{
			return new catalogType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog", index)));
		}

		public catalogType Getcatalog()
		{
			return GetcatalogAt(0);
		}

		public catalogType catalog
		{
			get
			{
				return GetcatalogAt(0);
			}
		}

		public void RemovecatalogAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog", index);
		}

		public void Removecatalog()
		{
			while (Hascatalog())
				RemovecatalogAt(0);
		}

		public void Addcatalog(catalogType newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog", newValue.ToString());
		}

		public void InsertcatalogAt(catalogType newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog", index, newValue.ToString());
		}

		public void ReplacecatalogAt(catalogType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalog", index, newValue.ToString());
		}
		#endregion // catalog accessor methods

		#region catalog collection
        public catalogCollection	Mycatalogs = new catalogCollection( );

        public class catalogCollection: IEnumerable
        {
            catalogentryType parent;
            public catalogentryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public catalogEnumerator GetEnumerator() 
			{
				return new catalogEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class catalogEnumerator: IEnumerator 
        {
			int nIndex;
			catalogentryType parent;
			public catalogEnumerator(catalogentryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.catalogCount );
			}
			public catalogType  Current 
			{
				get 
				{
					return(parent.GetcatalogAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // catalog collection

		#region entry accessor methods
		public int GetentryMinCount()
		{
			return 1;
		}

		public int entryMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetentryMaxCount()
		{
			return 1;
		}

		public int entryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetentryCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
		}

		public int entryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
			}
		}

		public bool Hasentry()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
		}

		public entryType GetentryAt(int index)
		{
			return new entryType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index));
		}

		public entryType Getentry()
		{
			return GetentryAt(0);
		}

		public entryType entry
		{
			get
			{
				return GetentryAt(0);
			}
		}

		public void RemoveentryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index);
		}

		public void Removeentry()
		{
			while (Hasentry())
				RemoveentryAt(0);
		}

		public void Addentry(entryType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", newValue);
		}

		public void InsertentryAt(entryType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index, newValue);
		}

		public void ReplaceentryAt(entryType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index, newValue);
		}
		#endregion // entry accessor methods

		#region entry collection
        public entryCollection	Myentrys = new entryCollection( );

        public class entryCollection: IEnumerable
        {
            catalogentryType parent;
            public catalogentryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public entryEnumerator GetEnumerator() 
			{
				return new entryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class entryEnumerator: IEnumerator 
        {
			int nIndex;
			catalogentryType parent;
			public entryEnumerator(catalogentryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.entryCount );
			}
			public entryType  Current 
			{
				get 
				{
					return(parent.GetentryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // entry collection

        private void SetCollectionParents()
        {
            Mycatalogs.Parent = this; 
            Myentrys.Parent = this; 
	}
}
}
