//
// generalType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class generalType : Altova.Node
	{
		#region Forward constructors
		public generalType() : base() { SetCollectionParents(); }
		public generalType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public generalType(XmlNode node) : base(node) { SetCollectionParents(); }
		public generalType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title", i);
				InternalAdjustPrefix(DOMNode, true);
				new titleType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry", i);
				InternalAdjustPrefix(DOMNode, true);
				new catalogentryType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", i);
				InternalAdjustPrefix(DOMNode, true);
				new descriptionType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword", i);
				InternalAdjustPrefix(DOMNode, true);
				new keywordType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage", i);
				InternalAdjustPrefix(DOMNode, true);
				new coverageType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure", i);
				InternalAdjustPrefix(DOMNode, true);
				new structureType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel", i);
				InternalAdjustPrefix(DOMNode, true);
				new aggregationlevelType(DOMNode).AdjustPrefix();
			}
		}


		#region identifier accessor methods
		public int GetidentifierMinCount()
		{
			return 0;
		}

		public int identifierMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetidentifierMaxCount()
		{
			return 1;
		}

		public int identifierMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidentifierCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier");
		}

		public int identifierCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier");
			}
		}

		public bool Hasidentifier()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier");
		}

		public SchemaString GetidentifierAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier", index)));
		}

		public SchemaString Getidentifier()
		{
			return GetidentifierAt(0);
		}

		public SchemaString identifier
		{
			get
			{
				return GetidentifierAt(0);
			}
		}

		public void RemoveidentifierAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier", index);
		}

		public void Removeidentifier()
		{
			while (Hasidentifier())
				RemoveidentifierAt(0);
		}

		public void Addidentifier(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier", newValue.ToString());
		}

		public void InsertidentifierAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier", index, newValue.ToString());
		}

		public void ReplaceidentifierAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "identifier", index, newValue.ToString());
		}
		#endregion // identifier accessor methods

		#region identifier collection
        public identifierCollection	Myidentifiers = new identifierCollection( );

        public class identifierCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public identifierEnumerator GetEnumerator() 
			{
				return new identifierEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class identifierEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public identifierEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.identifierCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetidentifierAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // identifier collection

		#region title accessor methods
		public int GettitleMinCount()
		{
			return 0;
		}

		public int titleMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GettitleMaxCount()
		{
			return 1;
		}

		public int titleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettitleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title");
		}

		public int titleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title");
			}
		}

		public bool Hastitle()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title");
		}

		public titleType GettitleAt(int index)
		{
			return new titleType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title", index));
		}

		public titleType Gettitle()
		{
			return GettitleAt(0);
		}

		public titleType title
		{
			get
			{
				return GettitleAt(0);
			}
		}

		public void RemovetitleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title", index);
		}

		public void Removetitle()
		{
			while (Hastitle())
				RemovetitleAt(0);
		}

		public void Addtitle(titleType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title", newValue);
		}

		public void InserttitleAt(titleType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title", index, newValue);
		}

		public void ReplacetitleAt(titleType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "title", index, newValue);
		}
		#endregion // title accessor methods

		#region title collection
        public titleCollection	Mytitles = new titleCollection( );

        public class titleCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public titleEnumerator GetEnumerator() 
			{
				return new titleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class titleEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public titleEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.titleCount );
			}
			public titleType  Current 
			{
				get 
				{
					return(parent.GettitleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // title collection

		#region catalogentry accessor methods
		public int GetcatalogentryMinCount()
		{
			return 0;
		}

		public int catalogentryMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetcatalogentryMaxCount()
		{
			return Int32.MaxValue;
		}

		public int catalogentryMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetcatalogentryCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry");
		}

		public int catalogentryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry");
			}
		}

		public bool Hascatalogentry()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry");
		}

		public catalogentryType GetcatalogentryAt(int index)
		{
			return new catalogentryType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry", index));
		}

		public catalogentryType Getcatalogentry()
		{
			return GetcatalogentryAt(0);
		}

		public catalogentryType catalogentry
		{
			get
			{
				return GetcatalogentryAt(0);
			}
		}

		public void RemovecatalogentryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry", index);
		}

		public void Removecatalogentry()
		{
			while (Hascatalogentry())
				RemovecatalogentryAt(0);
		}

		public void Addcatalogentry(catalogentryType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry", newValue);
		}

		public void InsertcatalogentryAt(catalogentryType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry", index, newValue);
		}

		public void ReplacecatalogentryAt(catalogentryType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "catalogentry", index, newValue);
		}
		#endregion // catalogentry accessor methods

		#region catalogentry collection
        public catalogentryCollection	Mycatalogentrys = new catalogentryCollection( );

        public class catalogentryCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public catalogentryEnumerator GetEnumerator() 
			{
				return new catalogentryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class catalogentryEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public catalogentryEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.catalogentryCount );
			}
			public catalogentryType  Current 
			{
				get 
				{
					return(parent.GetcatalogentryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // catalogentry collection

		#region language accessor methods
		public int GetlanguageMinCount()
		{
			return 0;
		}

		public int languageMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetlanguageMaxCount()
		{
			return Int32.MaxValue;
		}

		public int languageMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetlanguageCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
		}

		public int languageCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
			}
		}

		public bool Haslanguage()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
		}

		public SchemaString GetlanguageAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index)));
		}

		public SchemaString Getlanguage()
		{
			return GetlanguageAt(0);
		}

		public SchemaString language
		{
			get
			{
				return GetlanguageAt(0);
			}
		}

		public void RemovelanguageAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index);
		}

		public void Removelanguage()
		{
			while (Haslanguage())
				RemovelanguageAt(0);
		}

		public void Addlanguage(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", newValue.ToString());
		}

		public void InsertlanguageAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index, newValue.ToString());
		}

		public void ReplacelanguageAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index, newValue.ToString());
		}
		#endregion // language accessor methods

		#region language collection
        public languageCollection	Mylanguages = new languageCollection( );

        public class languageCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public languageEnumerator GetEnumerator() 
			{
				return new languageEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class languageEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public languageEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.languageCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetlanguageAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // language collection

		#region description accessor methods
		public int GetdescriptionMinCount()
		{
			return 0;
		}

		public int descriptionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdescriptionMaxCount()
		{
			return Int32.MaxValue;
		}

		public int descriptionMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetdescriptionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
		}

		public int descriptionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
			}
		}

		public bool Hasdescription()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
		}

		public descriptionType GetdescriptionAt(int index)
		{
			return new descriptionType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index));
		}

		public descriptionType Getdescription()
		{
			return GetdescriptionAt(0);
		}

		public descriptionType description
		{
			get
			{
				return GetdescriptionAt(0);
			}
		}

		public void RemovedescriptionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index);
		}

		public void Removedescription()
		{
			while (Hasdescription())
				RemovedescriptionAt(0);
		}

		public void Adddescription(descriptionType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", newValue);
		}

		public void InsertdescriptionAt(descriptionType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index, newValue);
		}

		public void ReplacedescriptionAt(descriptionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index, newValue);
		}
		#endregion // description accessor methods

		#region description collection
        public descriptionCollection	Mydescriptions = new descriptionCollection( );

        public class descriptionCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public descriptionEnumerator GetEnumerator() 
			{
				return new descriptionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class descriptionEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public descriptionEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.descriptionCount );
			}
			public descriptionType  Current 
			{
				get 
				{
					return(parent.GetdescriptionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // description collection

		#region keyword accessor methods
		public int GetkeywordMinCount()
		{
			return 0;
		}

		public int keywordMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetkeywordMaxCount()
		{
			return Int32.MaxValue;
		}

		public int keywordMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetkeywordCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword");
		}

		public int keywordCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword");
			}
		}

		public bool Haskeyword()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword");
		}

		public keywordType GetkeywordAt(int index)
		{
			return new keywordType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword", index));
		}

		public keywordType Getkeyword()
		{
			return GetkeywordAt(0);
		}

		public keywordType keyword
		{
			get
			{
				return GetkeywordAt(0);
			}
		}

		public void RemovekeywordAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword", index);
		}

		public void Removekeyword()
		{
			while (Haskeyword())
				RemovekeywordAt(0);
		}

		public void Addkeyword(keywordType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword", newValue);
		}

		public void InsertkeywordAt(keywordType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword", index, newValue);
		}

		public void ReplacekeywordAt(keywordType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "keyword", index, newValue);
		}
		#endregion // keyword accessor methods

		#region keyword collection
        public keywordCollection	Mykeywords = new keywordCollection( );

        public class keywordCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public keywordEnumerator GetEnumerator() 
			{
				return new keywordEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class keywordEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public keywordEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.keywordCount );
			}
			public keywordType  Current 
			{
				get 
				{
					return(parent.GetkeywordAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // keyword collection

		#region coverage accessor methods
		public int GetcoverageMinCount()
		{
			return 0;
		}

		public int coverageMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetcoverageMaxCount()
		{
			return Int32.MaxValue;
		}

		public int coverageMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetcoverageCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage");
		}

		public int coverageCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage");
			}
		}

		public bool Hascoverage()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage");
		}

		public coverageType GetcoverageAt(int index)
		{
			return new coverageType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage", index));
		}

		public coverageType Getcoverage()
		{
			return GetcoverageAt(0);
		}

		public coverageType coverage
		{
			get
			{
				return GetcoverageAt(0);
			}
		}

		public void RemovecoverageAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage", index);
		}

		public void Removecoverage()
		{
			while (Hascoverage())
				RemovecoverageAt(0);
		}

		public void Addcoverage(coverageType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage", newValue);
		}

		public void InsertcoverageAt(coverageType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage", index, newValue);
		}

		public void ReplacecoverageAt(coverageType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "coverage", index, newValue);
		}
		#endregion // coverage accessor methods

		#region coverage collection
        public coverageCollection	Mycoverages = new coverageCollection( );

        public class coverageCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public coverageEnumerator GetEnumerator() 
			{
				return new coverageEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class coverageEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public coverageEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.coverageCount );
			}
			public coverageType  Current 
			{
				get 
				{
					return(parent.GetcoverageAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // coverage collection

		#region structure accessor methods
		public int GetstructureMinCount()
		{
			return 0;
		}

		public int structureMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetstructureMaxCount()
		{
			return 1;
		}

		public int structureMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetstructureCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure");
		}

		public int structureCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure");
			}
		}

		public bool Hasstructure()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure");
		}

		public structureType GetstructureAt(int index)
		{
			return new structureType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure", index));
		}

		public structureType Getstructure()
		{
			return GetstructureAt(0);
		}

		public structureType structure
		{
			get
			{
				return GetstructureAt(0);
			}
		}

		public void RemovestructureAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure", index);
		}

		public void Removestructure()
		{
			while (Hasstructure())
				RemovestructureAt(0);
		}

		public void Addstructure(structureType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure", newValue);
		}

		public void InsertstructureAt(structureType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure", index, newValue);
		}

		public void ReplacestructureAt(structureType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "structure", index, newValue);
		}
		#endregion // structure accessor methods

		#region structure collection
        public structureCollection	Mystructures = new structureCollection( );

        public class structureCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public structureEnumerator GetEnumerator() 
			{
				return new structureEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class structureEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public structureEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.structureCount );
			}
			public structureType  Current 
			{
				get 
				{
					return(parent.GetstructureAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // structure collection

		#region aggregationlevel accessor methods
		public int GetaggregationlevelMinCount()
		{
			return 0;
		}

		public int aggregationlevelMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetaggregationlevelMaxCount()
		{
			return 1;
		}

		public int aggregationlevelMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetaggregationlevelCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel");
		}

		public int aggregationlevelCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel");
			}
		}

		public bool Hasaggregationlevel()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel");
		}

		public aggregationlevelType GetaggregationlevelAt(int index)
		{
			return new aggregationlevelType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel", index));
		}

		public aggregationlevelType Getaggregationlevel()
		{
			return GetaggregationlevelAt(0);
		}

		public aggregationlevelType aggregationlevel
		{
			get
			{
				return GetaggregationlevelAt(0);
			}
		}

		public void RemoveaggregationlevelAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel", index);
		}

		public void Removeaggregationlevel()
		{
			while (Hasaggregationlevel())
				RemoveaggregationlevelAt(0);
		}

		public void Addaggregationlevel(aggregationlevelType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel", newValue);
		}

		public void InsertaggregationlevelAt(aggregationlevelType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel", index, newValue);
		}

		public void ReplaceaggregationlevelAt(aggregationlevelType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "aggregationlevel", index, newValue);
		}
		#endregion // aggregationlevel accessor methods

		#region aggregationlevel collection
        public aggregationlevelCollection	Myaggregationlevels = new aggregationlevelCollection( );

        public class aggregationlevelCollection: IEnumerable
        {
            generalType parent;
            public generalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public aggregationlevelEnumerator GetEnumerator() 
			{
				return new aggregationlevelEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class aggregationlevelEnumerator: IEnumerator 
        {
			int nIndex;
			generalType parent;
			public aggregationlevelEnumerator(generalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.aggregationlevelCount );
			}
			public aggregationlevelType  Current 
			{
				get 
				{
					return(parent.GetaggregationlevelAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // aggregationlevel collection

        private void SetCollectionParents()
        {
            Myidentifiers.Parent = this; 
            Mytitles.Parent = this; 
            Mycatalogentrys.Parent = this; 
            Mylanguages.Parent = this; 
            Mydescriptions.Parent = this; 
            Mykeywords.Parent = this; 
            Mycoverages.Parent = this; 
            Mystructures.Parent = this; 
            Myaggregationlevels.Parent = this; 
	}
}
}
