//
// technicalType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class technicalType : Altova.Node
	{
		#region Forward constructors
		public technicalType() : base() { SetCollectionParents(); }
		public technicalType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public technicalType(XmlNode node) : base(node) { SetCollectionParents(); }
		public technicalType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location", i);
				InternalAdjustPrefix(DOMNode, true);
				new locationType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement", i);
				InternalAdjustPrefix(DOMNode, true);
				new requirementType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks", i);
				InternalAdjustPrefix(DOMNode, true);
				new installationremarksType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements", i);
				InternalAdjustPrefix(DOMNode, true);
				new otherplatformrequirementsType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration", i);
				InternalAdjustPrefix(DOMNode, true);
				new durationType(DOMNode).AdjustPrefix();
			}
		}


		#region format accessor methods
		public int GetformatMinCount()
		{
			return 0;
		}

		public int formatMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetformatMaxCount()
		{
			return Int32.MaxValue;
		}

		public int formatMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetformatCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format");
		}

		public int formatCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format");
			}
		}

		public bool Hasformat()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format");
		}

		public formatType GetformatAt(int index)
		{
			return new formatType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format", index)));
		}

		public formatType Getformat()
		{
			return GetformatAt(0);
		}

		public formatType format
		{
			get
			{
				return GetformatAt(0);
			}
		}

		public void RemoveformatAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format", index);
		}

		public void Removeformat()
		{
			while (Hasformat())
				RemoveformatAt(0);
		}

		public void Addformat(formatType newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format", newValue.ToString());
		}

		public void InsertformatAt(formatType newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format", index, newValue.ToString());
		}

		public void ReplaceformatAt(formatType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "format", index, newValue.ToString());
		}
		#endregion // format accessor methods

		#region format collection
        public formatCollection	Myformats = new formatCollection( );

        public class formatCollection: IEnumerable
        {
            technicalType parent;
            public technicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public formatEnumerator GetEnumerator() 
			{
				return new formatEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class formatEnumerator: IEnumerator 
        {
			int nIndex;
			technicalType parent;
			public formatEnumerator(technicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.formatCount );
			}
			public formatType  Current 
			{
				get 
				{
					return(parent.GetformatAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // format collection

		#region size accessor methods
		public int GetsizeMinCount()
		{
			return 0;
		}

		public int sizeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetsizeMaxCount()
		{
			return 1;
		}

		public int sizeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsizeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size");
		}

		public int sizeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size");
			}
		}

		public bool Hassize()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size");
		}

		public sizeType GetsizeAt(int index)
		{
			return new sizeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size", index)));
		}

		public sizeType Getsize()
		{
			return GetsizeAt(0);
		}

		public sizeType size
		{
			get
			{
				return GetsizeAt(0);
			}
		}

		public void RemovesizeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size", index);
		}

		public void Removesize()
		{
			while (Hassize())
				RemovesizeAt(0);
		}

		public void Addsize(sizeType newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size", newValue.ToString());
		}

		public void InsertsizeAt(sizeType newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size", index, newValue.ToString());
		}

		public void ReplacesizeAt(sizeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "size", index, newValue.ToString());
		}
		#endregion // size accessor methods

		#region size collection
        public sizeCollection	Mysizes = new sizeCollection( );

        public class sizeCollection: IEnumerable
        {
            technicalType parent;
            public technicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public sizeEnumerator GetEnumerator() 
			{
				return new sizeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class sizeEnumerator: IEnumerator 
        {
			int nIndex;
			technicalType parent;
			public sizeEnumerator(technicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.sizeCount );
			}
			public sizeType  Current 
			{
				get 
				{
					return(parent.GetsizeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // size collection

		#region location accessor methods
		public int GetlocationMinCount()
		{
			return 0;
		}

		public int locationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetlocationMaxCount()
		{
			return Int32.MaxValue;
		}

		public int locationMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetlocationCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location");
		}

		public int locationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location");
			}
		}

		public bool Haslocation()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location");
		}

		public locationType GetlocationAt(int index)
		{
			return new locationType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location", index));
		}

		public locationType Getlocation()
		{
			return GetlocationAt(0);
		}

		public locationType location
		{
			get
			{
				return GetlocationAt(0);
			}
		}

		public void RemovelocationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location", index);
		}

		public void Removelocation()
		{
			while (Haslocation())
				RemovelocationAt(0);
		}

		public void Addlocation(locationType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location", newValue);
		}

		public void InsertlocationAt(locationType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location", index, newValue);
		}

		public void ReplacelocationAt(locationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "location", index, newValue);
		}
		#endregion // location accessor methods

		#region location collection
        public locationCollection	Mylocations = new locationCollection( );

        public class locationCollection: IEnumerable
        {
            technicalType parent;
            public technicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public locationEnumerator GetEnumerator() 
			{
				return new locationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class locationEnumerator: IEnumerator 
        {
			int nIndex;
			technicalType parent;
			public locationEnumerator(technicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.locationCount );
			}
			public locationType  Current 
			{
				get 
				{
					return(parent.GetlocationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // location collection

		#region requirement accessor methods
		public int GetrequirementMinCount()
		{
			return 0;
		}

		public int requirementMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrequirementMaxCount()
		{
			return Int32.MaxValue;
		}

		public int requirementMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetrequirementCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement");
		}

		public int requirementCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement");
			}
		}

		public bool Hasrequirement()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement");
		}

		public requirementType GetrequirementAt(int index)
		{
			return new requirementType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement", index));
		}

		public requirementType Getrequirement()
		{
			return GetrequirementAt(0);
		}

		public requirementType requirement
		{
			get
			{
				return GetrequirementAt(0);
			}
		}

		public void RemoverequirementAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement", index);
		}

		public void Removerequirement()
		{
			while (Hasrequirement())
				RemoverequirementAt(0);
		}

		public void Addrequirement(requirementType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement", newValue);
		}

		public void InsertrequirementAt(requirementType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement", index, newValue);
		}

		public void ReplacerequirementAt(requirementType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "requirement", index, newValue);
		}
		#endregion // requirement accessor methods

		#region requirement collection
        public requirementCollection	Myrequirements = new requirementCollection( );

        public class requirementCollection: IEnumerable
        {
            technicalType parent;
            public technicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public requirementEnumerator GetEnumerator() 
			{
				return new requirementEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class requirementEnumerator: IEnumerator 
        {
			int nIndex;
			technicalType parent;
			public requirementEnumerator(technicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.requirementCount );
			}
			public requirementType  Current 
			{
				get 
				{
					return(parent.GetrequirementAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // requirement collection

		#region installationremarks accessor methods
		public int GetinstallationremarksMinCount()
		{
			return 0;
		}

		public int installationremarksMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetinstallationremarksMaxCount()
		{
			return 1;
		}

		public int installationremarksMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetinstallationremarksCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks");
		}

		public int installationremarksCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks");
			}
		}

		public bool Hasinstallationremarks()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks");
		}

		public installationremarksType GetinstallationremarksAt(int index)
		{
			return new installationremarksType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks", index));
		}

		public installationremarksType Getinstallationremarks()
		{
			return GetinstallationremarksAt(0);
		}

		public installationremarksType installationremarks
		{
			get
			{
				return GetinstallationremarksAt(0);
			}
		}

		public void RemoveinstallationremarksAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks", index);
		}

		public void Removeinstallationremarks()
		{
			while (Hasinstallationremarks())
				RemoveinstallationremarksAt(0);
		}

		public void Addinstallationremarks(installationremarksType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks", newValue);
		}

		public void InsertinstallationremarksAt(installationremarksType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks", index, newValue);
		}

		public void ReplaceinstallationremarksAt(installationremarksType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "installationremarks", index, newValue);
		}
		#endregion // installationremarks accessor methods

		#region installationremarks collection
        public installationremarksCollection	Myinstallationremarkss = new installationremarksCollection( );

        public class installationremarksCollection: IEnumerable
        {
            technicalType parent;
            public technicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public installationremarksEnumerator GetEnumerator() 
			{
				return new installationremarksEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class installationremarksEnumerator: IEnumerator 
        {
			int nIndex;
			technicalType parent;
			public installationremarksEnumerator(technicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.installationremarksCount );
			}
			public installationremarksType  Current 
			{
				get 
				{
					return(parent.GetinstallationremarksAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // installationremarks collection

		#region otherplatformrequirements accessor methods
		public int GetotherplatformrequirementsMinCount()
		{
			return 0;
		}

		public int otherplatformrequirementsMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetotherplatformrequirementsMaxCount()
		{
			return 1;
		}

		public int otherplatformrequirementsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetotherplatformrequirementsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements");
		}

		public int otherplatformrequirementsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements");
			}
		}

		public bool Hasotherplatformrequirements()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements");
		}

		public otherplatformrequirementsType GetotherplatformrequirementsAt(int index)
		{
			return new otherplatformrequirementsType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements", index));
		}

		public otherplatformrequirementsType Getotherplatformrequirements()
		{
			return GetotherplatformrequirementsAt(0);
		}

		public otherplatformrequirementsType otherplatformrequirements
		{
			get
			{
				return GetotherplatformrequirementsAt(0);
			}
		}

		public void RemoveotherplatformrequirementsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements", index);
		}

		public void Removeotherplatformrequirements()
		{
			while (Hasotherplatformrequirements())
				RemoveotherplatformrequirementsAt(0);
		}

		public void Addotherplatformrequirements(otherplatformrequirementsType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements", newValue);
		}

		public void InsertotherplatformrequirementsAt(otherplatformrequirementsType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements", index, newValue);
		}

		public void ReplaceotherplatformrequirementsAt(otherplatformrequirementsType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "otherplatformrequirements", index, newValue);
		}
		#endregion // otherplatformrequirements accessor methods

		#region otherplatformrequirements collection
        public otherplatformrequirementsCollection	Myotherplatformrequirementss = new otherplatformrequirementsCollection( );

        public class otherplatformrequirementsCollection: IEnumerable
        {
            technicalType parent;
            public technicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public otherplatformrequirementsEnumerator GetEnumerator() 
			{
				return new otherplatformrequirementsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class otherplatformrequirementsEnumerator: IEnumerator 
        {
			int nIndex;
			technicalType parent;
			public otherplatformrequirementsEnumerator(technicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.otherplatformrequirementsCount );
			}
			public otherplatformrequirementsType  Current 
			{
				get 
				{
					return(parent.GetotherplatformrequirementsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // otherplatformrequirements collection

		#region duration accessor methods
		public int GetdurationMinCount()
		{
			return 0;
		}

		public int durationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdurationMaxCount()
		{
			return 1;
		}

		public int durationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdurationCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration");
		}

		public int durationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration");
			}
		}

		public bool Hasduration()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration");
		}

		public durationType GetdurationAt(int index)
		{
			return new durationType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration", index));
		}

		public durationType Getduration()
		{
			return GetdurationAt(0);
		}

		public durationType duration
		{
			get
			{
				return GetdurationAt(0);
			}
		}

		public void RemovedurationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration", index);
		}

		public void Removeduration()
		{
			while (Hasduration())
				RemovedurationAt(0);
		}

		public void Addduration(durationType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration", newValue);
		}

		public void InsertdurationAt(durationType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration", index, newValue);
		}

		public void ReplacedurationAt(durationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "duration", index, newValue);
		}
		#endregion // duration accessor methods

		#region duration collection
        public durationCollection	Mydurations = new durationCollection( );

        public class durationCollection: IEnumerable
        {
            technicalType parent;
            public technicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public durationEnumerator GetEnumerator() 
			{
				return new durationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class durationEnumerator: IEnumerator 
        {
			int nIndex;
			technicalType parent;
			public durationEnumerator(technicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.durationCount );
			}
			public durationType  Current 
			{
				get 
				{
					return(parent.GetdurationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // duration collection

        private void SetCollectionParents()
        {
            Myformats.Parent = this; 
            Mysizes.Parent = this; 
            Mylocations.Parent = this; 
            Myrequirements.Parent = this; 
            Myinstallationremarkss.Parent = this; 
            Myotherplatformrequirementss.Parent = this; 
            Mydurations.Parent = this; 
	}
}
}
