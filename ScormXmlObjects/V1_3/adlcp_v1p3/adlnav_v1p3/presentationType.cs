//
// presentationType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;

namespace adlnav_v1p3
{
	public class presentationType : Altova.Node
	{
		#region Forward constructors
		public presentationType() : base() { SetCollectionParents(); }
		public presentationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public presentationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public presentationType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface", i);
				InternalAdjustPrefix(DOMNode, true);
				new navigationInterfaceType(DOMNode).AdjustPrefix();
			}
		}


		#region navigationInterface accessor methods
		public int GetnavigationInterfaceMinCount()
		{
			return 0;
		}

		public int navigationInterfaceMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetnavigationInterfaceMaxCount()
		{
			return 1;
		}

		public int navigationInterfaceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnavigationInterfaceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface");
		}

		public int navigationInterfaceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface");
			}
		}

		public bool HasnavigationInterface()
		{
			return HasDomChild(NodeType.Element, "http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface");
		}

		public navigationInterfaceType GetnavigationInterfaceAt(int index)
		{
			return new navigationInterfaceType(GetDomChildAt(NodeType.Element, "http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface", index));
		}

		public navigationInterfaceType GetnavigationInterface()
		{
			return GetnavigationInterfaceAt(0);
		}

		public navigationInterfaceType navigationInterface
		{
			get
			{
				return GetnavigationInterfaceAt(0);
			}
		}

		public void RemovenavigationInterfaceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface", index);
		}

		public void RemovenavigationInterface()
		{
			while (HasnavigationInterface())
				RemovenavigationInterfaceAt(0);
		}

		public void AddnavigationInterface(navigationInterfaceType newValue)
		{
			AppendDomElement("http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface", newValue);
		}

		public void InsertnavigationInterfaceAt(navigationInterfaceType newValue, int index)
		{
			InsertDomElementAt("http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface", index, newValue);
		}

		public void ReplacenavigationInterfaceAt(navigationInterfaceType newValue, int index)
		{
			ReplaceDomElementAt("http://www.adlnet.org/xsd/adlnav_v1p3", "navigationInterface", index, newValue);
		}
		#endregion // navigationInterface accessor methods

		#region navigationInterface collection
        public navigationInterfaceCollection	MynavigationInterfaces = new navigationInterfaceCollection( );

        public class navigationInterfaceCollection: IEnumerable
        {
            presentationType parent;
            public presentationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public navigationInterfaceEnumerator GetEnumerator() 
			{
				return new navigationInterfaceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class navigationInterfaceEnumerator: IEnumerator 
        {
			int nIndex;
			presentationType parent;
			public navigationInterfaceEnumerator(presentationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.navigationInterfaceCount );
			}
			public navigationInterfaceType  Current 
			{
				get 
				{
					return(parent.GetnavigationInterfaceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // navigationInterface collection

        private void SetCollectionParents()
        {
            MynavigationInterfaces.Parent = this; 
	}
}
}
