//
// deliveryControlsType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class deliveryControlsType : Altova.Node
	{
		#region Forward constructors
		public deliveryControlsType() : base() { SetCollectionParents(); }
		public deliveryControlsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public deliveryControlsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public deliveryControlsType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "tracked");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "tracked", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "completionSetByContent");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "completionSetByContent", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "objectiveSetByContent");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "objectiveSetByContent", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region tracked accessor methods
		public int GettrackedMinCount()
		{
			return 0;
		}

		public int trackedMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GettrackedMaxCount()
		{
			return 1;
		}

		public int trackedMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettrackedCount()
		{
			return DomChildCount(NodeType.Attribute, "", "tracked");
		}

		public int trackedCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "tracked");
			}
		}

		public bool Hastracked()
		{
			return HasDomChild(NodeType.Attribute, "", "tracked");
		}

		public SchemaBoolean GettrackedAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "tracked", index)));
		}

		public SchemaBoolean Gettracked()
		{
			return GettrackedAt(0);
		}

		public SchemaBoolean tracked
		{
			get
			{
				return GettrackedAt(0);
			}
		}

		public void RemovetrackedAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "tracked", index);
		}

		public void Removetracked()
		{
			while (Hastracked())
				RemovetrackedAt(0);
		}

		public void Addtracked(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "tracked", newValue.ToString());
		}

		public void InserttrackedAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "tracked", index, newValue.ToString());
		}

		public void ReplacetrackedAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "tracked", index, newValue.ToString());
		}
		#endregion // tracked accessor methods

		#region tracked collection
        public trackedCollection	Mytrackeds = new trackedCollection( );

        public class trackedCollection: IEnumerable
        {
            deliveryControlsType parent;
            public deliveryControlsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public trackedEnumerator GetEnumerator() 
			{
				return new trackedEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class trackedEnumerator: IEnumerator 
        {
			int nIndex;
			deliveryControlsType parent;
			public trackedEnumerator(deliveryControlsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.trackedCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GettrackedAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // tracked collection

		#region completionSetByContent accessor methods
		public int GetcompletionSetByContentMinCount()
		{
			return 0;
		}

		public int completionSetByContentMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetcompletionSetByContentMaxCount()
		{
			return 1;
		}

		public int completionSetByContentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcompletionSetByContentCount()
		{
			return DomChildCount(NodeType.Attribute, "", "completionSetByContent");
		}

		public int completionSetByContentCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "completionSetByContent");
			}
		}

		public bool HascompletionSetByContent()
		{
			return HasDomChild(NodeType.Attribute, "", "completionSetByContent");
		}

		public SchemaBoolean GetcompletionSetByContentAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "completionSetByContent", index)));
		}

		public SchemaBoolean GetcompletionSetByContent()
		{
			return GetcompletionSetByContentAt(0);
		}

		public SchemaBoolean completionSetByContent
		{
			get
			{
				return GetcompletionSetByContentAt(0);
			}
		}

		public void RemovecompletionSetByContentAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "completionSetByContent", index);
		}

		public void RemovecompletionSetByContent()
		{
			while (HascompletionSetByContent())
				RemovecompletionSetByContentAt(0);
		}

		public void AddcompletionSetByContent(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "completionSetByContent", newValue.ToString());
		}

		public void InsertcompletionSetByContentAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "completionSetByContent", index, newValue.ToString());
		}

		public void ReplacecompletionSetByContentAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "completionSetByContent", index, newValue.ToString());
		}
		#endregion // completionSetByContent accessor methods

		#region completionSetByContent collection
        public completionSetByContentCollection	MycompletionSetByContents = new completionSetByContentCollection( );

        public class completionSetByContentCollection: IEnumerable
        {
            deliveryControlsType parent;
            public deliveryControlsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public completionSetByContentEnumerator GetEnumerator() 
			{
				return new completionSetByContentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class completionSetByContentEnumerator: IEnumerator 
        {
			int nIndex;
			deliveryControlsType parent;
			public completionSetByContentEnumerator(deliveryControlsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.completionSetByContentCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetcompletionSetByContentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // completionSetByContent collection

		#region objectiveSetByContent accessor methods
		public int GetobjectiveSetByContentMinCount()
		{
			return 0;
		}

		public int objectiveSetByContentMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetobjectiveSetByContentMaxCount()
		{
			return 1;
		}

		public int objectiveSetByContentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetobjectiveSetByContentCount()
		{
			return DomChildCount(NodeType.Attribute, "", "objectiveSetByContent");
		}

		public int objectiveSetByContentCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "objectiveSetByContent");
			}
		}

		public bool HasobjectiveSetByContent()
		{
			return HasDomChild(NodeType.Attribute, "", "objectiveSetByContent");
		}

		public SchemaBoolean GetobjectiveSetByContentAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "objectiveSetByContent", index)));
		}

		public SchemaBoolean GetobjectiveSetByContent()
		{
			return GetobjectiveSetByContentAt(0);
		}

		public SchemaBoolean objectiveSetByContent
		{
			get
			{
				return GetobjectiveSetByContentAt(0);
			}
		}

		public void RemoveobjectiveSetByContentAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "objectiveSetByContent", index);
		}

		public void RemoveobjectiveSetByContent()
		{
			while (HasobjectiveSetByContent())
				RemoveobjectiveSetByContentAt(0);
		}

		public void AddobjectiveSetByContent(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "objectiveSetByContent", newValue.ToString());
		}

		public void InsertobjectiveSetByContentAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "objectiveSetByContent", index, newValue.ToString());
		}

		public void ReplaceobjectiveSetByContentAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "objectiveSetByContent", index, newValue.ToString());
		}
		#endregion // objectiveSetByContent accessor methods

		#region objectiveSetByContent collection
        public objectiveSetByContentCollection	MyobjectiveSetByContents = new objectiveSetByContentCollection( );

        public class objectiveSetByContentCollection: IEnumerable
        {
            deliveryControlsType parent;
            public deliveryControlsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public objectiveSetByContentEnumerator GetEnumerator() 
			{
				return new objectiveSetByContentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class objectiveSetByContentEnumerator: IEnumerator 
        {
			int nIndex;
			deliveryControlsType parent;
			public objectiveSetByContentEnumerator(deliveryControlsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.objectiveSetByContentCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetobjectiveSetByContentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // objectiveSetByContent collection

        private void SetCollectionParents()
        {
            Mytrackeds.Parent = this; 
            MycompletionSetByContents.Parent = this; 
            MyobjectiveSetByContents.Parent = this; 
	}
}
}
