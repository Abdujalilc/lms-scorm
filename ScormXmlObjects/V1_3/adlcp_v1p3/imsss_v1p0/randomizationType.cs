//
// randomizationType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class randomizationType : Altova.Node
	{
		#region Forward constructors
		public randomizationType() : base() { SetCollectionParents(); }
		public randomizationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public randomizationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public randomizationType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "randomizationTiming");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "randomizationTiming", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "selectCount");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "selectCount", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "reorderChildren");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "reorderChildren", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "selectionTiming");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "selectionTiming", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region randomizationTiming accessor methods
		public int GetrandomizationTimingMinCount()
		{
			return 0;
		}

		public int randomizationTimingMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrandomizationTimingMaxCount()
		{
			return 1;
		}

		public int randomizationTimingMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrandomizationTimingCount()
		{
			return DomChildCount(NodeType.Attribute, "", "randomizationTiming");
		}

		public int randomizationTimingCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "randomizationTiming");
			}
		}

		public bool HasrandomizationTiming()
		{
			return HasDomChild(NodeType.Attribute, "", "randomizationTiming");
		}

		public randomTimingType GetrandomizationTimingAt(int index)
		{
			return new randomTimingType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "randomizationTiming", index)));
		}

		public randomTimingType GetrandomizationTiming()
		{
			return GetrandomizationTimingAt(0);
		}

		public randomTimingType randomizationTiming
		{
			get
			{
				return GetrandomizationTimingAt(0);
			}
		}

		public void RemoverandomizationTimingAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "randomizationTiming", index);
		}

		public void RemoverandomizationTiming()
		{
			while (HasrandomizationTiming())
				RemoverandomizationTimingAt(0);
		}

		public void AddrandomizationTiming(randomTimingType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "randomizationTiming", newValue.ToString());
		}

		public void InsertrandomizationTimingAt(randomTimingType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "randomizationTiming", index, newValue.ToString());
		}

		public void ReplacerandomizationTimingAt(randomTimingType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "randomizationTiming", index, newValue.ToString());
		}
		#endregion // randomizationTiming accessor methods

		#region randomizationTiming collection
        public randomizationTimingCollection	MyrandomizationTimings = new randomizationTimingCollection( );

        public class randomizationTimingCollection: IEnumerable
        {
            randomizationType parent;
            public randomizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public randomizationTimingEnumerator GetEnumerator() 
			{
				return new randomizationTimingEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class randomizationTimingEnumerator: IEnumerator 
        {
			int nIndex;
			randomizationType parent;
			public randomizationTimingEnumerator(randomizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.randomizationTimingCount );
			}
			public randomTimingType  Current 
			{
				get 
				{
					return(parent.GetrandomizationTimingAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // randomizationTiming collection

		#region selectCount accessor methods
		public int GetselectCountMinCount()
		{
			return 0;
		}

		public int selectCountMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetselectCountMaxCount()
		{
			return 1;
		}

		public int selectCountMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetselectCountCount()
		{
			return DomChildCount(NodeType.Attribute, "", "selectCount");
		}

		public int selectCountCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "selectCount");
			}
		}

		public bool HasselectCount()
		{
			return HasDomChild(NodeType.Attribute, "", "selectCount");
		}

		public SchemaLong GetselectCountAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "selectCount", index)));
		}

		public SchemaLong GetselectCount()
		{
			return GetselectCountAt(0);
		}

		public SchemaLong selectCount
		{
			get
			{
				return GetselectCountAt(0);
			}
		}

		public void RemoveselectCountAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "selectCount", index);
		}

		public void RemoveselectCount()
		{
			while (HasselectCount())
				RemoveselectCountAt(0);
		}

		public void AddselectCount(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "selectCount", newValue.ToString());
		}

		public void InsertselectCountAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "selectCount", index, newValue.ToString());
		}

		public void ReplaceselectCountAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "selectCount", index, newValue.ToString());
		}
		#endregion // selectCount accessor methods

		#region selectCount collection
        public selectCountCollection	MyselectCounts = new selectCountCollection( );

        public class selectCountCollection: IEnumerable
        {
            randomizationType parent;
            public randomizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public selectCountEnumerator GetEnumerator() 
			{
				return new selectCountEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class selectCountEnumerator: IEnumerator 
        {
			int nIndex;
			randomizationType parent;
			public selectCountEnumerator(randomizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.selectCountCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetselectCountAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // selectCount collection

		#region reorderChildren accessor methods
		public int GetreorderChildrenMinCount()
		{
			return 0;
		}

		public int reorderChildrenMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetreorderChildrenMaxCount()
		{
			return 1;
		}

		public int reorderChildrenMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetreorderChildrenCount()
		{
			return DomChildCount(NodeType.Attribute, "", "reorderChildren");
		}

		public int reorderChildrenCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "reorderChildren");
			}
		}

		public bool HasreorderChildren()
		{
			return HasDomChild(NodeType.Attribute, "", "reorderChildren");
		}

		public SchemaBoolean GetreorderChildrenAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "reorderChildren", index)));
		}

		public SchemaBoolean GetreorderChildren()
		{
			return GetreorderChildrenAt(0);
		}

		public SchemaBoolean reorderChildren
		{
			get
			{
				return GetreorderChildrenAt(0);
			}
		}

		public void RemovereorderChildrenAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "reorderChildren", index);
		}

		public void RemovereorderChildren()
		{
			while (HasreorderChildren())
				RemovereorderChildrenAt(0);
		}

		public void AddreorderChildren(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "reorderChildren", newValue.ToString());
		}

		public void InsertreorderChildrenAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "reorderChildren", index, newValue.ToString());
		}

		public void ReplacereorderChildrenAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "reorderChildren", index, newValue.ToString());
		}
		#endregion // reorderChildren accessor methods

		#region reorderChildren collection
        public reorderChildrenCollection	MyreorderChildrens = new reorderChildrenCollection( );

        public class reorderChildrenCollection: IEnumerable
        {
            randomizationType parent;
            public randomizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public reorderChildrenEnumerator GetEnumerator() 
			{
				return new reorderChildrenEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class reorderChildrenEnumerator: IEnumerator 
        {
			int nIndex;
			randomizationType parent;
			public reorderChildrenEnumerator(randomizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.reorderChildrenCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetreorderChildrenAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // reorderChildren collection

		#region selectionTiming accessor methods
		public int GetselectionTimingMinCount()
		{
			return 0;
		}

		public int selectionTimingMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetselectionTimingMaxCount()
		{
			return 1;
		}

		public int selectionTimingMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetselectionTimingCount()
		{
			return DomChildCount(NodeType.Attribute, "", "selectionTiming");
		}

		public int selectionTimingCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "selectionTiming");
			}
		}

		public bool HasselectionTiming()
		{
			return HasDomChild(NodeType.Attribute, "", "selectionTiming");
		}

		public randomTimingType GetselectionTimingAt(int index)
		{
			return new randomTimingType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "selectionTiming", index)));
		}

		public randomTimingType GetselectionTiming()
		{
			return GetselectionTimingAt(0);
		}

		public randomTimingType selectionTiming
		{
			get
			{
				return GetselectionTimingAt(0);
			}
		}

		public void RemoveselectionTimingAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "selectionTiming", index);
		}

		public void RemoveselectionTiming()
		{
			while (HasselectionTiming())
				RemoveselectionTimingAt(0);
		}

		public void AddselectionTiming(randomTimingType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "selectionTiming", newValue.ToString());
		}

		public void InsertselectionTimingAt(randomTimingType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "selectionTiming", index, newValue.ToString());
		}

		public void ReplaceselectionTimingAt(randomTimingType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "selectionTiming", index, newValue.ToString());
		}
		#endregion // selectionTiming accessor methods

		#region selectionTiming collection
        public selectionTimingCollection	MyselectionTimings = new selectionTimingCollection( );

        public class selectionTimingCollection: IEnumerable
        {
            randomizationType parent;
            public randomizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public selectionTimingEnumerator GetEnumerator() 
			{
				return new selectionTimingEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class selectionTimingEnumerator: IEnumerator 
        {
			int nIndex;
			randomizationType parent;
			public selectionTimingEnumerator(randomizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.selectionTimingCount );
			}
			public randomTimingType  Current 
			{
				get 
				{
					return(parent.GetselectionTimingAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // selectionTiming collection

        private void SetCollectionParents()
        {
            MyrandomizationTimings.Parent = this; 
            MyselectCounts.Parent = this; 
            MyreorderChildrens.Parent = this; 
            MyselectionTimings.Parent = this; 
	}
}
}
