//
// rollupRuleType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class rollupRuleType : Altova.Node
	{
		#region Forward constructors
		public rollupRuleType() : base() { SetCollectionParents(); }
		public rollupRuleType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public rollupRuleType(XmlNode node) : base(node) { SetCollectionParents(); }
		public rollupRuleType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "childActivitySet");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "childActivitySet", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "minimumCount");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "minimumCount", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "minimumPercent");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "minimumPercent", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupConditions");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupConditions", i);
				InternalAdjustPrefix(DOMNode, true);
				new rollupConditionsType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupAction");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupAction", i);
				InternalAdjustPrefix(DOMNode, true);
				new rollupActionType(DOMNode).AdjustPrefix();
			}
		}


		#region childActivitySet accessor methods
		public int GetchildActivitySetMinCount()
		{
			return 0;
		}

		public int childActivitySetMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetchildActivitySetMaxCount()
		{
			return 1;
		}

		public int childActivitySetMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetchildActivitySetCount()
		{
			return DomChildCount(NodeType.Attribute, "", "childActivitySet");
		}

		public int childActivitySetCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "childActivitySet");
			}
		}

		public bool HaschildActivitySet()
		{
			return HasDomChild(NodeType.Attribute, "", "childActivitySet");
		}

		public childActivityType GetchildActivitySetAt(int index)
		{
			return new childActivityType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "childActivitySet", index)));
		}

		public childActivityType GetchildActivitySet()
		{
			return GetchildActivitySetAt(0);
		}

		public childActivityType childActivitySet
		{
			get
			{
				return GetchildActivitySetAt(0);
			}
		}

		public void RemovechildActivitySetAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "childActivitySet", index);
		}

		public void RemovechildActivitySet()
		{
			while (HaschildActivitySet())
				RemovechildActivitySetAt(0);
		}

		public void AddchildActivitySet(childActivityType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "childActivitySet", newValue.ToString());
		}

		public void InsertchildActivitySetAt(childActivityType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "childActivitySet", index, newValue.ToString());
		}

		public void ReplacechildActivitySetAt(childActivityType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "childActivitySet", index, newValue.ToString());
		}
		#endregion // childActivitySet accessor methods

		#region childActivitySet collection
        public childActivitySetCollection	MychildActivitySets = new childActivitySetCollection( );

        public class childActivitySetCollection: IEnumerable
        {
            rollupRuleType parent;
            public rollupRuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public childActivitySetEnumerator GetEnumerator() 
			{
				return new childActivitySetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class childActivitySetEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRuleType parent;
			public childActivitySetEnumerator(rollupRuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.childActivitySetCount );
			}
			public childActivityType  Current 
			{
				get 
				{
					return(parent.GetchildActivitySetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // childActivitySet collection

		#region minimumCount accessor methods
		public int GetminimumCountMinCount()
		{
			return 0;
		}

		public int minimumCountMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetminimumCountMaxCount()
		{
			return 1;
		}

		public int minimumCountMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetminimumCountCount()
		{
			return DomChildCount(NodeType.Attribute, "", "minimumCount");
		}

		public int minimumCountCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "minimumCount");
			}
		}

		public bool HasminimumCount()
		{
			return HasDomChild(NodeType.Attribute, "", "minimumCount");
		}

		public SchemaLong GetminimumCountAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "minimumCount", index)));
		}

		public SchemaLong GetminimumCount()
		{
			return GetminimumCountAt(0);
		}

		public SchemaLong minimumCount
		{
			get
			{
				return GetminimumCountAt(0);
			}
		}

		public void RemoveminimumCountAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "minimumCount", index);
		}

		public void RemoveminimumCount()
		{
			while (HasminimumCount())
				RemoveminimumCountAt(0);
		}

		public void AddminimumCount(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "minimumCount", newValue.ToString());
		}

		public void InsertminimumCountAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "minimumCount", index, newValue.ToString());
		}

		public void ReplaceminimumCountAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "minimumCount", index, newValue.ToString());
		}
		#endregion // minimumCount accessor methods

		#region minimumCount collection
        public minimumCountCollection	MyminimumCounts = new minimumCountCollection( );

        public class minimumCountCollection: IEnumerable
        {
            rollupRuleType parent;
            public rollupRuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public minimumCountEnumerator GetEnumerator() 
			{
				return new minimumCountEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class minimumCountEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRuleType parent;
			public minimumCountEnumerator(rollupRuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.minimumCountCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetminimumCountAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // minimumCount collection

		#region minimumPercent accessor methods
		public int GetminimumPercentMinCount()
		{
			return 0;
		}

		public int minimumPercentMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetminimumPercentMaxCount()
		{
			return 1;
		}

		public int minimumPercentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetminimumPercentCount()
		{
			return DomChildCount(NodeType.Attribute, "", "minimumPercent");
		}

		public int minimumPercentCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "minimumPercent");
			}
		}

		public bool HasminimumPercent()
		{
			return HasDomChild(NodeType.Attribute, "", "minimumPercent");
		}

		public percentType GetminimumPercentAt(int index)
		{
			return new percentType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "minimumPercent", index)));
		}

		public percentType GetminimumPercent()
		{
			return GetminimumPercentAt(0);
		}

		public percentType minimumPercent
		{
			get
			{
				return GetminimumPercentAt(0);
			}
		}

		public void RemoveminimumPercentAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "minimumPercent", index);
		}

		public void RemoveminimumPercent()
		{
			while (HasminimumPercent())
				RemoveminimumPercentAt(0);
		}

		public void AddminimumPercent(percentType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "minimumPercent", newValue.ToString());
		}

		public void InsertminimumPercentAt(percentType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "minimumPercent", index, newValue.ToString());
		}

		public void ReplaceminimumPercentAt(percentType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "minimumPercent", index, newValue.ToString());
		}
		#endregion // minimumPercent accessor methods

		#region minimumPercent collection
        public minimumPercentCollection	MyminimumPercents = new minimumPercentCollection( );

        public class minimumPercentCollection: IEnumerable
        {
            rollupRuleType parent;
            public rollupRuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public minimumPercentEnumerator GetEnumerator() 
			{
				return new minimumPercentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class minimumPercentEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRuleType parent;
			public minimumPercentEnumerator(rollupRuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.minimumPercentCount );
			}
			public percentType  Current 
			{
				get 
				{
					return(parent.GetminimumPercentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // minimumPercent collection

		#region rollupConditions accessor methods
		public int GetrollupConditionsMinCount()
		{
			return 1;
		}

		public int rollupConditionsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupConditionsMaxCount()
		{
			return 1;
		}

		public int rollupConditionsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupConditionsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupConditions");
		}

		public int rollupConditionsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupConditions");
			}
		}

		public bool HasrollupConditions()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupConditions");
		}

		public rollupConditionsType GetrollupConditionsAt(int index)
		{
			return new rollupConditionsType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupConditions", index));
		}

		public rollupConditionsType GetrollupConditions()
		{
			return GetrollupConditionsAt(0);
		}

		public rollupConditionsType rollupConditions
		{
			get
			{
				return GetrollupConditionsAt(0);
			}
		}

		public void RemoverollupConditionsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupConditions", index);
		}

		public void RemoverollupConditions()
		{
			while (HasrollupConditions())
				RemoverollupConditionsAt(0);
		}

		public void AddrollupConditions(rollupConditionsType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "rollupConditions", newValue);
		}

		public void InsertrollupConditionsAt(rollupConditionsType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupConditions", index, newValue);
		}

		public void ReplacerollupConditionsAt(rollupConditionsType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupConditions", index, newValue);
		}
		#endregion // rollupConditions accessor methods

		#region rollupConditions collection
        public rollupConditionsCollection	MyrollupConditionss = new rollupConditionsCollection( );

        public class rollupConditionsCollection: IEnumerable
        {
            rollupRuleType parent;
            public rollupRuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rollupConditionsEnumerator GetEnumerator() 
			{
				return new rollupConditionsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rollupConditionsEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRuleType parent;
			public rollupConditionsEnumerator(rollupRuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rollupConditionsCount );
			}
			public rollupConditionsType  Current 
			{
				get 
				{
					return(parent.GetrollupConditionsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rollupConditions collection

		#region rollupAction accessor methods
		public int GetrollupActionMinCount()
		{
			return 1;
		}

		public int rollupActionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupActionMaxCount()
		{
			return 1;
		}

		public int rollupActionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupActionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupAction");
		}

		public int rollupActionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupAction");
			}
		}

		public bool HasrollupAction()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupAction");
		}

		public rollupActionType GetrollupActionAt(int index)
		{
			return new rollupActionType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupAction", index));
		}

		public rollupActionType GetrollupAction()
		{
			return GetrollupActionAt(0);
		}

		public rollupActionType rollupAction
		{
			get
			{
				return GetrollupActionAt(0);
			}
		}

		public void RemoverollupActionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupAction", index);
		}

		public void RemoverollupAction()
		{
			while (HasrollupAction())
				RemoverollupActionAt(0);
		}

		public void AddrollupAction(rollupActionType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "rollupAction", newValue);
		}

		public void InsertrollupActionAt(rollupActionType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupAction", index, newValue);
		}

		public void ReplacerollupActionAt(rollupActionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupAction", index, newValue);
		}
		#endregion // rollupAction accessor methods

		#region rollupAction collection
        public rollupActionCollection	MyrollupActions = new rollupActionCollection( );

        public class rollupActionCollection: IEnumerable
        {
            rollupRuleType parent;
            public rollupRuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rollupActionEnumerator GetEnumerator() 
			{
				return new rollupActionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rollupActionEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRuleType parent;
			public rollupActionEnumerator(rollupRuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rollupActionCount );
			}
			public rollupActionType  Current 
			{
				get 
				{
					return(parent.GetrollupActionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rollupAction collection

        private void SetCollectionParents()
        {
            MychildActivitySets.Parent = this; 
            MyminimumCounts.Parent = this; 
            MyminimumPercents.Parent = this; 
            MyrollupConditionss.Parent = this; 
            MyrollupActions.Parent = this; 
	}
}
}
