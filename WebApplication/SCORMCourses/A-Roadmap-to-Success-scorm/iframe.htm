<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<!--- file date: 2/20/15 --->
<head>
	<title>ODI Roadmap</title>
	<script type="text/javascript" src="APIWrapper.js"></script>
	<script type="text/javascript" src="web_course/jQuery/jquery-1.11.2.min.js"></script>
	<script type="text/javascript">
		var lmsConnection = false; //boolean variable to check for LMS connection
		var currentBookmark = "web_course/Screen01.htm";
		var pagesViewed = "|";
		var ReturnToMenu = 0;
		var lastLessonPage = ""; //for use when Glossary etc. is called.
		var pagesArray = ["Screen01", "Screen02", "Screen03", "Screen03a", "Screen04", "Screen05", "Screen06", "Screen07", "Screen08", "Screen09", "Screen10", "Screen11", "Screen12", "Screen13", "Screen14", "Screen15", "Screen16", "Screen17", "Screen18", "Screen19", "Screen20", "Screen21", "Screen22", "Screen23", "Screen24", "Screen25", "Screen26", "Screen27", "Screen28", "Screen29", "Screen30", "Screen31", "Screen32", "Screen33", "Screen34", "Screen35", "Screen36", "Screen37", "Screen38", "Screen39", "Screen40", "Screen41", "Screen42", "Screen43", "Screen44", "Screen45", "Screen46", "Screen47", "Screen48", "Screen49", "Screen50", "Screen51", "Screen52", "Screen53", "Screen54", "Screen55"];
		$(document).ready(function () {
			//Initialize LMS connection
			if (!lmsConnection) {
				var result = doLMSInitialize();
				lmsConnection = result;
			}

			if (lmsConnection) {
				var status = doLMSGetValue("cmi.core.lesson_status");
				if (status == "not attempted" || status == "unknown") {
					// the student is attempting the lesson for the first time
					doLMSSetValue("cmi.core.lesson_status", "incomplete");
					doLMSCommit();
				} else {
					// restore previous session variables
					var c = doLMSGetValue("cmi.core.lesson_location");

					//Following added by Dan Herr, 4/13/2015 - convert full URL bookmark to a relative URL
					//  -- This is only necessary to deal with users who ran have bookmarks that were set before my change to the SetBookmark function
					if ((c.indexOf("http") == 0) && (c.indexOf("web_course") > -1)) {
						c = "web_course" + c.split("web_course")[1];
					}

					if (c != "") {
						currentBookmark = c;
					}
					var p = doLMSGetValue("cmi.suspend_data");
					if (p != "") {
						pagesViewed = p;
					}
					if (status == "completed") {
						currentBookmark = "web_course/Screen55.htm";
					}
				}
			}
			document.getElementById("courseframe").src = "dtm.htm";
		});


		/**************************************************************************************************************
        Child window can call this function to set this lesson complete.  This should be an automatic call on the last
        page of a SCO
        **************************************************************************************************************/

		function SetCompleteFromChild() {
			if (lmsConnection) {
				doLMSSetValue("cmi.core.score.raw", "100");
				doLMSSetValue("cmi.core.lesson_status", "completed");
				doLMSCommit();
			}
		}

		/**************************************************************************************************************
        Child window can call this function to terminate the connection to the LMS and close the intermediate window.
        This call should be invoked from the child on the quit button.
        **************************************************************************************************************/
		function QuitSCO() {
			if (lmsConnection) {
				SaveCompletionString();
				doLMSFinish();
			}
			lmsConnection = false;
		}

		function handleUnload(referee) {
			if (lmsConnection) {
				doLMSFinish();
				lmsConnection = false;
			}
			if (referee == 0) {
				window.opener = self;
				self.close();
				//window.close();
			}
		}

		/**************************************************************************************************************
        This function sets the current page as a bookmark to the LMS
        **************************************************************************************************************/
		function SetBookmark(pageURL) {
			var b;
			var lc;
			var ok;
			b = pageURL;
			lc = b.toLowerCase();

			//Following added by Dan Herr, 4/3/2015 - make bookmark a relative URL
			b = "web_course" + b.split("web_course")[1];

			ok = lc.indexOf("ref") + lc.indexOf("menu") + lc.indexOf("resources");
			if (ok == -3) {
				//Following changed by Dan Herr, 4/3/2015 - make bookmark a relative URL
				//currentBookmark = pageURL;
				currentBookmark = b;
				//alert("currentBookmark: " + currentBookmark);
				if (lmsConnection) {
					doLMSSetValue("cmi.core.lesson_location", currentBookmark);
					doLMSCommit();
				}
			}
		}


		/**************************************************************************************************************
        This function sets the current completion string to the LMS
        **************************************************************************************************************/
		function SaveCompletionString() {
			if (lmsConnection) {
				doLMSSetValue("cmi.suspend_data", pagesViewed);
				doLMSCommit();
			}
		}


		/**************************************************************************************************************
        Keystroke intercept functions for Refresh commands - we do not want users to be able to refresh this screen,
        because the connection to Plateau must persist and should not be reinstantiated...note the keyDown() keyUp()
        calls on the body of this frame page.
        **************************************************************************************************************/

		function cancelRefresh() {
			// keycode for F5 function
			if (window.event && window.event.keyCode == 116) {
				//alert("Please do not try to refresh this window again!");
				window.event.keyCode = 8;
			}
			// keycode for backspace
			if (window.event && window.event.keyCode == 8) {
				// try to cancel the backspace
				window.event.cancelBubble = true;
				window.event.returnValue = false;
				return false;
			}
		}

		function keyDown() {
			if (window.event && window.event.keyCode == 17) {
				ctrlstate = 1;
				//document.getElementById("c1").innerHTML = ctrlstate;  //this causes an error
			}
			if (window.event && window.event.keyCode == 116) {
				window.event.keyCode = 0;
				window.event.cancelBubble = true;
				window.event.returnValue = false;
			}

			if (window.event && window.event.keyCode == 82 && ctrlstate == 1) {
				window.event.keyCode = 0;
				window.event.cancelBubble = true;
				window.event.returnValue = false;
			}

		}

		function keyUp() {
			if (window.event && window.event.keyCode == 17) {
				ctrlstate = 0;
			}
		}


		function confirmClose() {
			if (!ReturnToMenu)
				event.returnValue = "If you are viewing a lesson, this window must remain open.";
		}


		// function for checking if been there for pages where Next initially disabled
		function setPageViewed(v) {
			//alert("setPageViewed(" + v + ")");
			if (pagesViewed.indexOf(v + "|") == -1) {
				pagesViewed += v + "|";
				SaveCompletionString();
			}
		}

		function closeWindow() {
			//window.opener = self;
			//self.close();
			top.close();
		}


	</script>
	<style type="text/css">
		html {
			height: 100%;
			overflow: auto;
		}

		body {
			height: 100%;
			background-color: #EDF4FC;
			overflow: auto;
		}

		iframe {
			border: none;
			height: 100%;
			width: 100%;
			padding: 0;
			margin: 0;
			background-repeat: repeat-x;
		}
	</style>
</head>

<body onkeydown="keyDown()" onkeyup="keyUp()" onunload="handleUnload(1)" style="border: none; margin: 0; padding: 0; overflow:hidden">
	<iframe id="courseframe" title="courseframe" frameborder="0" src="loading-in-progress.htm" width="1024" height="100%"></iframe>
</body>

</html>
