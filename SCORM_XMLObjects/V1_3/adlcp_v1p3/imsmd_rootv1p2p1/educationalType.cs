//
// educationalType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class educationalType : Altova.Node
	{
		#region Forward constructors
		public educationalType() : base() { SetCollectionParents(); }
		public educationalType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public educationalType(XmlNode node) : base(node) { SetCollectionParents(); }
		public educationalType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype", i);
				InternalAdjustPrefix(DOMNode, true);
				new interactivitytypeType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype", i);
				InternalAdjustPrefix(DOMNode, true);
				new learningresourcetypeType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel", i);
				InternalAdjustPrefix(DOMNode, true);
				new interactivitylevelType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity", i);
				InternalAdjustPrefix(DOMNode, true);
				new semanticdensityType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole", i);
				InternalAdjustPrefix(DOMNode, true);
				new intendedenduserroleType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context", i);
				InternalAdjustPrefix(DOMNode, true);
				new contextType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange", i);
				InternalAdjustPrefix(DOMNode, true);
				new typicalagerangeType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty", i);
				InternalAdjustPrefix(DOMNode, true);
				new difficultyType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime", i);
				InternalAdjustPrefix(DOMNode, true);
				new typicallearningtimeType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", i);
				InternalAdjustPrefix(DOMNode, true);
				new descriptionType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region interactivitytype accessor methods
		public int GetinteractivitytypeMinCount()
		{
			return 0;
		}

		public int interactivitytypeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetinteractivitytypeMaxCount()
		{
			return 1;
		}

		public int interactivitytypeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetinteractivitytypeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype");
		}

		public int interactivitytypeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype");
			}
		}

		public bool Hasinteractivitytype()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype");
		}

		public interactivitytypeType GetinteractivitytypeAt(int index)
		{
			return new interactivitytypeType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype", index));
		}

		public interactivitytypeType Getinteractivitytype()
		{
			return GetinteractivitytypeAt(0);
		}

		public interactivitytypeType interactivitytype
		{
			get
			{
				return GetinteractivitytypeAt(0);
			}
		}

		public void RemoveinteractivitytypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype", index);
		}

		public void Removeinteractivitytype()
		{
			while (Hasinteractivitytype())
				RemoveinteractivitytypeAt(0);
		}

		public void Addinteractivitytype(interactivitytypeType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype", newValue);
		}

		public void InsertinteractivitytypeAt(interactivitytypeType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype", index, newValue);
		}

		public void ReplaceinteractivitytypeAt(interactivitytypeType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitytype", index, newValue);
		}
		#endregion // interactivitytype accessor methods

		#region interactivitytype collection
        public interactivitytypeCollection	Myinteractivitytypes = new interactivitytypeCollection( );

        public class interactivitytypeCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public interactivitytypeEnumerator GetEnumerator() 
			{
				return new interactivitytypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class interactivitytypeEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public interactivitytypeEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.interactivitytypeCount );
			}
			public interactivitytypeType  Current 
			{
				get 
				{
					return(parent.GetinteractivitytypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // interactivitytype collection

		#region learningresourcetype accessor methods
		public int GetlearningresourcetypeMinCount()
		{
			return 0;
		}

		public int learningresourcetypeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetlearningresourcetypeMaxCount()
		{
			return Int32.MaxValue;
		}

		public int learningresourcetypeMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetlearningresourcetypeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype");
		}

		public int learningresourcetypeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype");
			}
		}

		public bool Haslearningresourcetype()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype");
		}

		public learningresourcetypeType GetlearningresourcetypeAt(int index)
		{
			return new learningresourcetypeType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype", index));
		}

		public learningresourcetypeType Getlearningresourcetype()
		{
			return GetlearningresourcetypeAt(0);
		}

		public learningresourcetypeType learningresourcetype
		{
			get
			{
				return GetlearningresourcetypeAt(0);
			}
		}

		public void RemovelearningresourcetypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype", index);
		}

		public void Removelearningresourcetype()
		{
			while (Haslearningresourcetype())
				RemovelearningresourcetypeAt(0);
		}

		public void Addlearningresourcetype(learningresourcetypeType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype", newValue);
		}

		public void InsertlearningresourcetypeAt(learningresourcetypeType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype", index, newValue);
		}

		public void ReplacelearningresourcetypeAt(learningresourcetypeType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "learningresourcetype", index, newValue);
		}
		#endregion // learningresourcetype accessor methods

		#region learningresourcetype collection
        public learningresourcetypeCollection	Mylearningresourcetypes = new learningresourcetypeCollection( );

        public class learningresourcetypeCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public learningresourcetypeEnumerator GetEnumerator() 
			{
				return new learningresourcetypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class learningresourcetypeEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public learningresourcetypeEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.learningresourcetypeCount );
			}
			public learningresourcetypeType  Current 
			{
				get 
				{
					return(parent.GetlearningresourcetypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // learningresourcetype collection

		#region interactivitylevel accessor methods
		public int GetinteractivitylevelMinCount()
		{
			return 0;
		}

		public int interactivitylevelMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetinteractivitylevelMaxCount()
		{
			return 1;
		}

		public int interactivitylevelMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetinteractivitylevelCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel");
		}

		public int interactivitylevelCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel");
			}
		}

		public bool Hasinteractivitylevel()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel");
		}

		public interactivitylevelType GetinteractivitylevelAt(int index)
		{
			return new interactivitylevelType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel", index));
		}

		public interactivitylevelType Getinteractivitylevel()
		{
			return GetinteractivitylevelAt(0);
		}

		public interactivitylevelType interactivitylevel
		{
			get
			{
				return GetinteractivitylevelAt(0);
			}
		}

		public void RemoveinteractivitylevelAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel", index);
		}

		public void Removeinteractivitylevel()
		{
			while (Hasinteractivitylevel())
				RemoveinteractivitylevelAt(0);
		}

		public void Addinteractivitylevel(interactivitylevelType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel", newValue);
		}

		public void InsertinteractivitylevelAt(interactivitylevelType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel", index, newValue);
		}

		public void ReplaceinteractivitylevelAt(interactivitylevelType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "interactivitylevel", index, newValue);
		}
		#endregion // interactivitylevel accessor methods

		#region interactivitylevel collection
        public interactivitylevelCollection	Myinteractivitylevels = new interactivitylevelCollection( );

        public class interactivitylevelCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public interactivitylevelEnumerator GetEnumerator() 
			{
				return new interactivitylevelEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class interactivitylevelEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public interactivitylevelEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.interactivitylevelCount );
			}
			public interactivitylevelType  Current 
			{
				get 
				{
					return(parent.GetinteractivitylevelAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // interactivitylevel collection

		#region semanticdensity accessor methods
		public int GetsemanticdensityMinCount()
		{
			return 0;
		}

		public int semanticdensityMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetsemanticdensityMaxCount()
		{
			return 1;
		}

		public int semanticdensityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsemanticdensityCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity");
		}

		public int semanticdensityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity");
			}
		}

		public bool Hassemanticdensity()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity");
		}

		public semanticdensityType GetsemanticdensityAt(int index)
		{
			return new semanticdensityType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity", index));
		}

		public semanticdensityType Getsemanticdensity()
		{
			return GetsemanticdensityAt(0);
		}

		public semanticdensityType semanticdensity
		{
			get
			{
				return GetsemanticdensityAt(0);
			}
		}

		public void RemovesemanticdensityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity", index);
		}

		public void Removesemanticdensity()
		{
			while (Hassemanticdensity())
				RemovesemanticdensityAt(0);
		}

		public void Addsemanticdensity(semanticdensityType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity", newValue);
		}

		public void InsertsemanticdensityAt(semanticdensityType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity", index, newValue);
		}

		public void ReplacesemanticdensityAt(semanticdensityType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "semanticdensity", index, newValue);
		}
		#endregion // semanticdensity accessor methods

		#region semanticdensity collection
        public semanticdensityCollection	Mysemanticdensitys = new semanticdensityCollection( );

        public class semanticdensityCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public semanticdensityEnumerator GetEnumerator() 
			{
				return new semanticdensityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class semanticdensityEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public semanticdensityEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.semanticdensityCount );
			}
			public semanticdensityType  Current 
			{
				get 
				{
					return(parent.GetsemanticdensityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // semanticdensity collection

		#region intendedenduserrole accessor methods
		public int GetintendedenduserroleMinCount()
		{
			return 0;
		}

		public int intendedenduserroleMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetintendedenduserroleMaxCount()
		{
			return Int32.MaxValue;
		}

		public int intendedenduserroleMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetintendedenduserroleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole");
		}

		public int intendedenduserroleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole");
			}
		}

		public bool Hasintendedenduserrole()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole");
		}

		public intendedenduserroleType GetintendedenduserroleAt(int index)
		{
			return new intendedenduserroleType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole", index));
		}

		public intendedenduserroleType Getintendedenduserrole()
		{
			return GetintendedenduserroleAt(0);
		}

		public intendedenduserroleType intendedenduserrole
		{
			get
			{
				return GetintendedenduserroleAt(0);
			}
		}

		public void RemoveintendedenduserroleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole", index);
		}

		public void Removeintendedenduserrole()
		{
			while (Hasintendedenduserrole())
				RemoveintendedenduserroleAt(0);
		}

		public void Addintendedenduserrole(intendedenduserroleType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole", newValue);
		}

		public void InsertintendedenduserroleAt(intendedenduserroleType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole", index, newValue);
		}

		public void ReplaceintendedenduserroleAt(intendedenduserroleType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "intendedenduserrole", index, newValue);
		}
		#endregion // intendedenduserrole accessor methods

		#region intendedenduserrole collection
        public intendedenduserroleCollection	Myintendedenduserroles = new intendedenduserroleCollection( );

        public class intendedenduserroleCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public intendedenduserroleEnumerator GetEnumerator() 
			{
				return new intendedenduserroleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class intendedenduserroleEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public intendedenduserroleEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.intendedenduserroleCount );
			}
			public intendedenduserroleType  Current 
			{
				get 
				{
					return(parent.GetintendedenduserroleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // intendedenduserrole collection

		#region context accessor methods
		public int GetcontextMinCount()
		{
			return 0;
		}

		public int contextMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetcontextMaxCount()
		{
			return Int32.MaxValue;
		}

		public int contextMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetcontextCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context");
		}

		public int contextCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context");
			}
		}

		public bool Hascontext()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context");
		}

		public contextType GetcontextAt(int index)
		{
			return new contextType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context", index));
		}

		public contextType Getcontext()
		{
			return GetcontextAt(0);
		}

		public contextType context
		{
			get
			{
				return GetcontextAt(0);
			}
		}

		public void RemovecontextAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context", index);
		}

		public void Removecontext()
		{
			while (Hascontext())
				RemovecontextAt(0);
		}

		public void Addcontext(contextType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context", newValue);
		}

		public void InsertcontextAt(contextType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context", index, newValue);
		}

		public void ReplacecontextAt(contextType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "context", index, newValue);
		}
		#endregion // context accessor methods

		#region context collection
        public contextCollection	Mycontexts = new contextCollection( );

        public class contextCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public contextEnumerator GetEnumerator() 
			{
				return new contextEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class contextEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public contextEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.contextCount );
			}
			public contextType  Current 
			{
				get 
				{
					return(parent.GetcontextAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // context collection

		#region typicalagerange accessor methods
		public int GettypicalagerangeMinCount()
		{
			return 0;
		}

		public int typicalagerangeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GettypicalagerangeMaxCount()
		{
			return Int32.MaxValue;
		}

		public int typicalagerangeMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GettypicalagerangeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange");
		}

		public int typicalagerangeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange");
			}
		}

		public bool Hastypicalagerange()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange");
		}

		public typicalagerangeType GettypicalagerangeAt(int index)
		{
			return new typicalagerangeType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange", index));
		}

		public typicalagerangeType Gettypicalagerange()
		{
			return GettypicalagerangeAt(0);
		}

		public typicalagerangeType typicalagerange
		{
			get
			{
				return GettypicalagerangeAt(0);
			}
		}

		public void RemovetypicalagerangeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange", index);
		}

		public void Removetypicalagerange()
		{
			while (Hastypicalagerange())
				RemovetypicalagerangeAt(0);
		}

		public void Addtypicalagerange(typicalagerangeType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange", newValue);
		}

		public void InserttypicalagerangeAt(typicalagerangeType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange", index, newValue);
		}

		public void ReplacetypicalagerangeAt(typicalagerangeType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicalagerange", index, newValue);
		}
		#endregion // typicalagerange accessor methods

		#region typicalagerange collection
        public typicalagerangeCollection	Mytypicalageranges = new typicalagerangeCollection( );

        public class typicalagerangeCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public typicalagerangeEnumerator GetEnumerator() 
			{
				return new typicalagerangeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class typicalagerangeEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public typicalagerangeEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.typicalagerangeCount );
			}
			public typicalagerangeType  Current 
			{
				get 
				{
					return(parent.GettypicalagerangeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // typicalagerange collection

		#region difficulty accessor methods
		public int GetdifficultyMinCount()
		{
			return 0;
		}

		public int difficultyMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdifficultyMaxCount()
		{
			return 1;
		}

		public int difficultyMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdifficultyCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty");
		}

		public int difficultyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty");
			}
		}

		public bool Hasdifficulty()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty");
		}

		public difficultyType GetdifficultyAt(int index)
		{
			return new difficultyType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty", index));
		}

		public difficultyType Getdifficulty()
		{
			return GetdifficultyAt(0);
		}

		public difficultyType difficulty
		{
			get
			{
				return GetdifficultyAt(0);
			}
		}

		public void RemovedifficultyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty", index);
		}

		public void Removedifficulty()
		{
			while (Hasdifficulty())
				RemovedifficultyAt(0);
		}

		public void Adddifficulty(difficultyType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty", newValue);
		}

		public void InsertdifficultyAt(difficultyType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty", index, newValue);
		}

		public void ReplacedifficultyAt(difficultyType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "difficulty", index, newValue);
		}
		#endregion // difficulty accessor methods

		#region difficulty collection
        public difficultyCollection	Mydifficultys = new difficultyCollection( );

        public class difficultyCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public difficultyEnumerator GetEnumerator() 
			{
				return new difficultyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class difficultyEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public difficultyEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.difficultyCount );
			}
			public difficultyType  Current 
			{
				get 
				{
					return(parent.GetdifficultyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // difficulty collection

		#region typicallearningtime accessor methods
		public int GettypicallearningtimeMinCount()
		{
			return 0;
		}

		public int typicallearningtimeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GettypicallearningtimeMaxCount()
		{
			return 1;
		}

		public int typicallearningtimeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettypicallearningtimeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime");
		}

		public int typicallearningtimeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime");
			}
		}

		public bool Hastypicallearningtime()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime");
		}

		public typicallearningtimeType GettypicallearningtimeAt(int index)
		{
			return new typicallearningtimeType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime", index));
		}

		public typicallearningtimeType Gettypicallearningtime()
		{
			return GettypicallearningtimeAt(0);
		}

		public typicallearningtimeType typicallearningtime
		{
			get
			{
				return GettypicallearningtimeAt(0);
			}
		}

		public void RemovetypicallearningtimeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime", index);
		}

		public void Removetypicallearningtime()
		{
			while (Hastypicallearningtime())
				RemovetypicallearningtimeAt(0);
		}

		public void Addtypicallearningtime(typicallearningtimeType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime", newValue);
		}

		public void InserttypicallearningtimeAt(typicallearningtimeType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime", index, newValue);
		}

		public void ReplacetypicallearningtimeAt(typicallearningtimeType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "typicallearningtime", index, newValue);
		}
		#endregion // typicallearningtime accessor methods

		#region typicallearningtime collection
        public typicallearningtimeCollection	Mytypicallearningtimes = new typicallearningtimeCollection( );

        public class typicallearningtimeCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public typicallearningtimeEnumerator GetEnumerator() 
			{
				return new typicallearningtimeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class typicallearningtimeEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public typicallearningtimeEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.typicallearningtimeCount );
			}
			public typicallearningtimeType  Current 
			{
				get 
				{
					return(parent.GettypicallearningtimeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // typicallearningtime collection

		#region description accessor methods
		public int GetdescriptionMinCount()
		{
			return 0;
		}

		public int descriptionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdescriptionMaxCount()
		{
			return 1;
		}

		public int descriptionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdescriptionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
		}

		public int descriptionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
			}
		}

		public bool Hasdescription()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description");
		}

		public descriptionType GetdescriptionAt(int index)
		{
			return new descriptionType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index));
		}

		public descriptionType Getdescription()
		{
			return GetdescriptionAt(0);
		}

		public descriptionType description
		{
			get
			{
				return GetdescriptionAt(0);
			}
		}

		public void RemovedescriptionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index);
		}

		public void Removedescription()
		{
			while (Hasdescription())
				RemovedescriptionAt(0);
		}

		public void Adddescription(descriptionType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", newValue);
		}

		public void InsertdescriptionAt(descriptionType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index, newValue);
		}

		public void ReplacedescriptionAt(descriptionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "description", index, newValue);
		}
		#endregion // description accessor methods

		#region description collection
        public descriptionCollection	Mydescriptions = new descriptionCollection( );

        public class descriptionCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public descriptionEnumerator GetEnumerator() 
			{
				return new descriptionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class descriptionEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public descriptionEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.descriptionCount );
			}
			public descriptionType  Current 
			{
				get 
				{
					return(parent.GetdescriptionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // description collection

		#region language accessor methods
		public int GetlanguageMinCount()
		{
			return 0;
		}

		public int languageMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetlanguageMaxCount()
		{
			return Int32.MaxValue;
		}

		public int languageMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetlanguageCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
		}

		public int languageCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
			}
		}

		public bool Haslanguage()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language");
		}

		public SchemaString GetlanguageAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index)));
		}

		public SchemaString Getlanguage()
		{
			return GetlanguageAt(0);
		}

		public SchemaString language
		{
			get
			{
				return GetlanguageAt(0);
			}
		}

		public void RemovelanguageAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index);
		}

		public void Removelanguage()
		{
			while (Haslanguage())
				RemovelanguageAt(0);
		}

		public void Addlanguage(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", newValue.ToString());
		}

		public void InsertlanguageAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index, newValue.ToString());
		}

		public void ReplacelanguageAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "language", index, newValue.ToString());
		}
		#endregion // language accessor methods

		#region language collection
        public languageCollection	Mylanguages = new languageCollection( );

        public class languageCollection: IEnumerable
        {
            educationalType parent;
            public educationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public languageEnumerator GetEnumerator() 
			{
				return new languageEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class languageEnumerator: IEnumerator 
        {
			int nIndex;
			educationalType parent;
			public languageEnumerator(educationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.languageCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetlanguageAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // language collection

        private void SetCollectionParents()
        {
            Myinteractivitytypes.Parent = this; 
            Mylearningresourcetypes.Parent = this; 
            Myinteractivitylevels.Parent = this; 
            Mysemanticdensitys.Parent = this; 
            Myintendedenduserroles.Parent = this; 
            Mycontexts.Parent = this; 
            Mytypicalageranges.Parent = this; 
            Mydifficultys.Parent = this; 
            Mytypicallearningtimes.Parent = this; 
            Mydescriptions.Parent = this; 
            Mylanguages.Parent = this; 
	}
}
}
