//
// lifecycleType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class lifecycleType : Altova.Node
	{
		#region Forward constructors
		public lifecycleType() : base() { SetCollectionParents(); }
		public lifecycleType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public lifecycleType(XmlNode node) : base(node) { SetCollectionParents(); }
		public lifecycleType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version", i);
				InternalAdjustPrefix(DOMNode, true);
				new versionType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status", i);
				InternalAdjustPrefix(DOMNode, true);
				new statusType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute", i);
				InternalAdjustPrefix(DOMNode, true);
				new contributeType(DOMNode).AdjustPrefix();
			}
		}


		#region version accessor methods
		public int GetversionMinCount()
		{
			return 0;
		}

		public int versionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetversionMaxCount()
		{
			return 1;
		}

		public int versionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetversionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version");
		}

		public int versionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version");
			}
		}

		public bool Hasversion()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version");
		}

		public versionType GetversionAt(int index)
		{
			return new versionType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version", index));
		}

		public versionType Getversion()
		{
			return GetversionAt(0);
		}

		public versionType version
		{
			get
			{
				return GetversionAt(0);
			}
		}

		public void RemoveversionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version", index);
		}

		public void Removeversion()
		{
			while (Hasversion())
				RemoveversionAt(0);
		}

		public void Addversion(versionType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version", newValue);
		}

		public void InsertversionAt(versionType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version", index, newValue);
		}

		public void ReplaceversionAt(versionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "version", index, newValue);
		}
		#endregion // version accessor methods

		#region version collection
        public versionCollection	Myversions = new versionCollection( );

        public class versionCollection: IEnumerable
        {
            lifecycleType parent;
            public lifecycleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public versionEnumerator GetEnumerator() 
			{
				return new versionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class versionEnumerator: IEnumerator 
        {
			int nIndex;
			lifecycleType parent;
			public versionEnumerator(lifecycleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.versionCount );
			}
			public versionType  Current 
			{
				get 
				{
					return(parent.GetversionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // version collection

		#region status accessor methods
		public int GetstatusMinCount()
		{
			return 0;
		}

		public int statusMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetstatusMaxCount()
		{
			return 1;
		}

		public int statusMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetstatusCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status");
		}

		public int statusCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status");
			}
		}

		public bool Hasstatus()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status");
		}

		public statusType GetstatusAt(int index)
		{
			return new statusType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status", index));
		}

		public statusType Getstatus()
		{
			return GetstatusAt(0);
		}

		public statusType status
		{
			get
			{
				return GetstatusAt(0);
			}
		}

		public void RemovestatusAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status", index);
		}

		public void Removestatus()
		{
			while (Hasstatus())
				RemovestatusAt(0);
		}

		public void Addstatus(statusType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status", newValue);
		}

		public void InsertstatusAt(statusType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status", index, newValue);
		}

		public void ReplacestatusAt(statusType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "status", index, newValue);
		}
		#endregion // status accessor methods

		#region status collection
        public statusCollection	Mystatuss = new statusCollection( );

        public class statusCollection: IEnumerable
        {
            lifecycleType parent;
            public lifecycleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public statusEnumerator GetEnumerator() 
			{
				return new statusEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class statusEnumerator: IEnumerator 
        {
			int nIndex;
			lifecycleType parent;
			public statusEnumerator(lifecycleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.statusCount );
			}
			public statusType  Current 
			{
				get 
				{
					return(parent.GetstatusAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // status collection

		#region contribute accessor methods
		public int GetcontributeMinCount()
		{
			return 0;
		}

		public int contributeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetcontributeMaxCount()
		{
			return Int32.MaxValue;
		}

		public int contributeMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetcontributeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute");
		}

		public int contributeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute");
			}
		}

		public bool Hascontribute()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute");
		}

		public contributeType GetcontributeAt(int index)
		{
			return new contributeType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute", index));
		}

		public contributeType Getcontribute()
		{
			return GetcontributeAt(0);
		}

		public contributeType contribute
		{
			get
			{
				return GetcontributeAt(0);
			}
		}

		public void RemovecontributeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute", index);
		}

		public void Removecontribute()
		{
			while (Hascontribute())
				RemovecontributeAt(0);
		}

		public void Addcontribute(contributeType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute", newValue);
		}

		public void InsertcontributeAt(contributeType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute", index, newValue);
		}

		public void ReplacecontributeAt(contributeType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "contribute", index, newValue);
		}
		#endregion // contribute accessor methods

		#region contribute collection
        public contributeCollection	Mycontributes = new contributeCollection( );

        public class contributeCollection: IEnumerable
        {
            lifecycleType parent;
            public lifecycleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public contributeEnumerator GetEnumerator() 
			{
				return new contributeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class contributeEnumerator: IEnumerator 
        {
			int nIndex;
			lifecycleType parent;
			public contributeEnumerator(lifecycleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.contributeCount );
			}
			public contributeType  Current 
			{
				get 
				{
					return(parent.GetcontributeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // contribute collection

        private void SetCollectionParents()
        {
            Myversions.Parent = this; 
            Mystatuss.Parent = this; 
            Mycontributes.Parent = this; 
	}
}
}
