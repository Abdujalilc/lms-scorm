//
// rollupRulesType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class rollupRulesType : Altova.Node
	{
		#region Forward constructors
		public rollupRulesType() : base() { SetCollectionParents(); }
		public rollupRulesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public rollupRulesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public rollupRulesType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "rollupObjectiveSatisfied");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "rollupObjectiveSatisfied", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "rollupProgressCompletion");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "rollupProgressCompletion", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "objectiveMeasureWeight");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "objectiveMeasureWeight", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRule");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRule", i);
				InternalAdjustPrefix(DOMNode, true);
				new rollupRuleType(DOMNode).AdjustPrefix();
			}
		}


		#region rollupObjectiveSatisfied accessor methods
		public int GetrollupObjectiveSatisfiedMinCount()
		{
			return 0;
		}

		public int rollupObjectiveSatisfiedMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrollupObjectiveSatisfiedMaxCount()
		{
			return 1;
		}

		public int rollupObjectiveSatisfiedMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupObjectiveSatisfiedCount()
		{
			return DomChildCount(NodeType.Attribute, "", "rollupObjectiveSatisfied");
		}

		public int rollupObjectiveSatisfiedCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "rollupObjectiveSatisfied");
			}
		}

		public bool HasrollupObjectiveSatisfied()
		{
			return HasDomChild(NodeType.Attribute, "", "rollupObjectiveSatisfied");
		}

		public SchemaBoolean GetrollupObjectiveSatisfiedAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "rollupObjectiveSatisfied", index)));
		}

		public SchemaBoolean GetrollupObjectiveSatisfied()
		{
			return GetrollupObjectiveSatisfiedAt(0);
		}

		public SchemaBoolean rollupObjectiveSatisfied
		{
			get
			{
				return GetrollupObjectiveSatisfiedAt(0);
			}
		}

		public void RemoverollupObjectiveSatisfiedAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "rollupObjectiveSatisfied", index);
		}

		public void RemoverollupObjectiveSatisfied()
		{
			while (HasrollupObjectiveSatisfied())
				RemoverollupObjectiveSatisfiedAt(0);
		}

		public void AddrollupObjectiveSatisfied(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "rollupObjectiveSatisfied", newValue.ToString());
		}

		public void InsertrollupObjectiveSatisfiedAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "rollupObjectiveSatisfied", index, newValue.ToString());
		}

		public void ReplacerollupObjectiveSatisfiedAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "rollupObjectiveSatisfied", index, newValue.ToString());
		}
		#endregion // rollupObjectiveSatisfied accessor methods

		#region rollupObjectiveSatisfied collection
        public rollupObjectiveSatisfiedCollection	MyrollupObjectiveSatisfieds = new rollupObjectiveSatisfiedCollection( );

        public class rollupObjectiveSatisfiedCollection: IEnumerable
        {
            rollupRulesType parent;
            public rollupRulesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rollupObjectiveSatisfiedEnumerator GetEnumerator() 
			{
				return new rollupObjectiveSatisfiedEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rollupObjectiveSatisfiedEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRulesType parent;
			public rollupObjectiveSatisfiedEnumerator(rollupRulesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rollupObjectiveSatisfiedCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetrollupObjectiveSatisfiedAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rollupObjectiveSatisfied collection

		#region rollupProgressCompletion accessor methods
		public int GetrollupProgressCompletionMinCount()
		{
			return 0;
		}

		public int rollupProgressCompletionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrollupProgressCompletionMaxCount()
		{
			return 1;
		}

		public int rollupProgressCompletionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupProgressCompletionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "rollupProgressCompletion");
		}

		public int rollupProgressCompletionCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "rollupProgressCompletion");
			}
		}

		public bool HasrollupProgressCompletion()
		{
			return HasDomChild(NodeType.Attribute, "", "rollupProgressCompletion");
		}

		public SchemaBoolean GetrollupProgressCompletionAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "rollupProgressCompletion", index)));
		}

		public SchemaBoolean GetrollupProgressCompletion()
		{
			return GetrollupProgressCompletionAt(0);
		}

		public SchemaBoolean rollupProgressCompletion
		{
			get
			{
				return GetrollupProgressCompletionAt(0);
			}
		}

		public void RemoverollupProgressCompletionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "rollupProgressCompletion", index);
		}

		public void RemoverollupProgressCompletion()
		{
			while (HasrollupProgressCompletion())
				RemoverollupProgressCompletionAt(0);
		}

		public void AddrollupProgressCompletion(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "rollupProgressCompletion", newValue.ToString());
		}

		public void InsertrollupProgressCompletionAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "rollupProgressCompletion", index, newValue.ToString());
		}

		public void ReplacerollupProgressCompletionAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "rollupProgressCompletion", index, newValue.ToString());
		}
		#endregion // rollupProgressCompletion accessor methods

		#region rollupProgressCompletion collection
        public rollupProgressCompletionCollection	MyrollupProgressCompletions = new rollupProgressCompletionCollection( );

        public class rollupProgressCompletionCollection: IEnumerable
        {
            rollupRulesType parent;
            public rollupRulesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rollupProgressCompletionEnumerator GetEnumerator() 
			{
				return new rollupProgressCompletionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rollupProgressCompletionEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRulesType parent;
			public rollupProgressCompletionEnumerator(rollupRulesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rollupProgressCompletionCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetrollupProgressCompletionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rollupProgressCompletion collection

		#region objectiveMeasureWeight accessor methods
		public int GetobjectiveMeasureWeightMinCount()
		{
			return 0;
		}

		public int objectiveMeasureWeightMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetobjectiveMeasureWeightMaxCount()
		{
			return 1;
		}

		public int objectiveMeasureWeightMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetobjectiveMeasureWeightCount()
		{
			return DomChildCount(NodeType.Attribute, "", "objectiveMeasureWeight");
		}

		public int objectiveMeasureWeightCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "objectiveMeasureWeight");
			}
		}

		public bool HasobjectiveMeasureWeight()
		{
			return HasDomChild(NodeType.Attribute, "", "objectiveMeasureWeight");
		}

		public weightType GetobjectiveMeasureWeightAt(int index)
		{
			return new weightType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "objectiveMeasureWeight", index)));
		}

		public weightType GetobjectiveMeasureWeight()
		{
			return GetobjectiveMeasureWeightAt(0);
		}

		public weightType objectiveMeasureWeight
		{
			get
			{
				return GetobjectiveMeasureWeightAt(0);
			}
		}

		public void RemoveobjectiveMeasureWeightAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "objectiveMeasureWeight", index);
		}

		public void RemoveobjectiveMeasureWeight()
		{
			while (HasobjectiveMeasureWeight())
				RemoveobjectiveMeasureWeightAt(0);
		}

		public void AddobjectiveMeasureWeight(weightType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "objectiveMeasureWeight", newValue.ToString());
		}

		public void InsertobjectiveMeasureWeightAt(weightType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "objectiveMeasureWeight", index, newValue.ToString());
		}

		public void ReplaceobjectiveMeasureWeightAt(weightType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "objectiveMeasureWeight", index, newValue.ToString());
		}
		#endregion // objectiveMeasureWeight accessor methods

		#region objectiveMeasureWeight collection
        public objectiveMeasureWeightCollection	MyobjectiveMeasureWeights = new objectiveMeasureWeightCollection( );

        public class objectiveMeasureWeightCollection: IEnumerable
        {
            rollupRulesType parent;
            public rollupRulesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public objectiveMeasureWeightEnumerator GetEnumerator() 
			{
				return new objectiveMeasureWeightEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class objectiveMeasureWeightEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRulesType parent;
			public objectiveMeasureWeightEnumerator(rollupRulesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.objectiveMeasureWeightCount );
			}
			public weightType  Current 
			{
				get 
				{
					return(parent.GetobjectiveMeasureWeightAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // objectiveMeasureWeight collection

		#region rollupRule accessor methods
		public int GetrollupRuleMinCount()
		{
			return 0;
		}

		public int rollupRuleMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrollupRuleMaxCount()
		{
			return Int32.MaxValue;
		}

		public int rollupRuleMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetrollupRuleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRule");
		}

		public int rollupRuleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRule");
			}
		}

		public bool HasrollupRule()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRule");
		}

		public rollupRuleType GetrollupRuleAt(int index)
		{
			return new rollupRuleType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRule", index));
		}

		public rollupRuleType GetrollupRule()
		{
			return GetrollupRuleAt(0);
		}

		public rollupRuleType rollupRule
		{
			get
			{
				return GetrollupRuleAt(0);
			}
		}

		public void RemoverollupRuleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRule", index);
		}

		public void RemoverollupRule()
		{
			while (HasrollupRule())
				RemoverollupRuleAt(0);
		}

		public void AddrollupRule(rollupRuleType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "rollupRule", newValue);
		}

		public void InsertrollupRuleAt(rollupRuleType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupRule", index, newValue);
		}

		public void ReplacerollupRuleAt(rollupRuleType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupRule", index, newValue);
		}
		#endregion // rollupRule accessor methods

		#region rollupRule collection
        public rollupRuleCollection	MyrollupRules = new rollupRuleCollection( );

        public class rollupRuleCollection: IEnumerable
        {
            rollupRulesType parent;
            public rollupRulesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rollupRuleEnumerator GetEnumerator() 
			{
				return new rollupRuleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rollupRuleEnumerator: IEnumerator 
        {
			int nIndex;
			rollupRulesType parent;
			public rollupRuleEnumerator(rollupRulesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rollupRuleCount );
			}
			public rollupRuleType  Current 
			{
				get 
				{
					return(parent.GetrollupRuleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rollupRule collection

        private void SetCollectionParents()
        {
            MyrollupObjectiveSatisfieds.Parent = this; 
            MyrollupProgressCompletions.Parent = this; 
            MyobjectiveMeasureWeights.Parent = this; 
            MyrollupRules.Parent = this; 
	}
}
}
