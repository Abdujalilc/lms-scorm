//
// auxiliaryResourceType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class auxiliaryResourceType : Altova.Node
	{
		#region Forward constructors
		public auxiliaryResourceType() : base() { SetCollectionParents(); }
		public auxiliaryResourceType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public auxiliaryResourceType(XmlNode node) : base(node) { SetCollectionParents(); }
		public auxiliaryResourceType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "auxiliaryResourceID");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "auxiliaryResourceID", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "purpose");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "purpose", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region auxiliaryResourceID accessor methods
		public int GetauxiliaryResourceIDMinCount()
		{
			return 1;
		}

		public int auxiliaryResourceIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetauxiliaryResourceIDMaxCount()
		{
			return 1;
		}

		public int auxiliaryResourceIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetauxiliaryResourceIDCount()
		{
			return DomChildCount(NodeType.Attribute, "", "auxiliaryResourceID");
		}

		public int auxiliaryResourceIDCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "auxiliaryResourceID");
			}
		}

		public bool HasauxiliaryResourceID()
		{
			return HasDomChild(NodeType.Attribute, "", "auxiliaryResourceID");
		}

		public SchemaString GetauxiliaryResourceIDAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "auxiliaryResourceID", index)));
		}

		public SchemaString GetauxiliaryResourceID()
		{
			return GetauxiliaryResourceIDAt(0);
		}

		public SchemaString auxiliaryResourceID
		{
			get
			{
				return GetauxiliaryResourceIDAt(0);
			}
		}

		public void RemoveauxiliaryResourceIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "auxiliaryResourceID", index);
		}

		public void RemoveauxiliaryResourceID()
		{
			while (HasauxiliaryResourceID())
				RemoveauxiliaryResourceIDAt(0);
		}

		public void AddauxiliaryResourceID(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "auxiliaryResourceID", newValue.ToString());
		}

		public void InsertauxiliaryResourceIDAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "auxiliaryResourceID", index, newValue.ToString());
		}

		public void ReplaceauxiliaryResourceIDAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "auxiliaryResourceID", index, newValue.ToString());
		}
		#endregion // auxiliaryResourceID accessor methods

		#region auxiliaryResourceID collection
        public auxiliaryResourceIDCollection	MyauxiliaryResourceIDs = new auxiliaryResourceIDCollection( );

        public class auxiliaryResourceIDCollection: IEnumerable
        {
            auxiliaryResourceType parent;
            public auxiliaryResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public auxiliaryResourceIDEnumerator GetEnumerator() 
			{
				return new auxiliaryResourceIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class auxiliaryResourceIDEnumerator: IEnumerator 
        {
			int nIndex;
			auxiliaryResourceType parent;
			public auxiliaryResourceIDEnumerator(auxiliaryResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.auxiliaryResourceIDCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetauxiliaryResourceIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // auxiliaryResourceID collection

		#region purpose accessor methods
		public int GetpurposeMinCount()
		{
			return 1;
		}

		public int purposeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetpurposeMaxCount()
		{
			return 1;
		}

		public int purposeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetpurposeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "purpose");
		}

		public int purposeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "purpose");
			}
		}

		public bool Haspurpose()
		{
			return HasDomChild(NodeType.Attribute, "", "purpose");
		}

		public SchemaString GetpurposeAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "purpose", index)));
		}

		public SchemaString Getpurpose()
		{
			return GetpurposeAt(0);
		}

		public SchemaString purpose
		{
			get
			{
				return GetpurposeAt(0);
			}
		}

		public void RemovepurposeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "purpose", index);
		}

		public void Removepurpose()
		{
			while (Haspurpose())
				RemovepurposeAt(0);
		}

		public void Addpurpose(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "purpose", newValue.ToString());
		}

		public void InsertpurposeAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "purpose", index, newValue.ToString());
		}

		public void ReplacepurposeAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "purpose", index, newValue.ToString());
		}
		#endregion // purpose accessor methods

		#region purpose collection
        public purposeCollection	Mypurposes = new purposeCollection( );

        public class purposeCollection: IEnumerable
        {
            auxiliaryResourceType parent;
            public auxiliaryResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public purposeEnumerator GetEnumerator() 
			{
				return new purposeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class purposeEnumerator: IEnumerator 
        {
			int nIndex;
			auxiliaryResourceType parent;
			public purposeEnumerator(auxiliaryResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.purposeCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetpurposeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // purpose collection

        private void SetCollectionParents()
        {
            MyauxiliaryResourceIDs.Parent = this; 
            Mypurposes.Parent = this; 
	}
}
}
