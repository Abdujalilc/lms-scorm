//
// limitConditionsType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class limitConditionsType : Altova.Node
	{
		#region Forward constructors
		public limitConditionsType() : base() { SetCollectionParents(); }
		public limitConditionsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public limitConditionsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public limitConditionsType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "attemptLimit");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "attemptLimit", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "attemptAbsoluteDurationLimit");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "attemptAbsoluteDurationLimit", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "attemptExperiencedDurationLimit");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "attemptExperiencedDurationLimit", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "activityAbsoluteDurationLimit");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "activityAbsoluteDurationLimit", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "activityExperiencedDurationLimit");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "activityExperiencedDurationLimit", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "beginTimeLimit");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "beginTimeLimit", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "endTimeLimit");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "endTimeLimit", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region attemptLimit accessor methods
		public int GetattemptLimitMinCount()
		{
			return 0;
		}

		public int attemptLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetattemptLimitMaxCount()
		{
			return 1;
		}

		public int attemptLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetattemptLimitCount()
		{
			return DomChildCount(NodeType.Attribute, "", "attemptLimit");
		}

		public int attemptLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "attemptLimit");
			}
		}

		public bool HasattemptLimit()
		{
			return HasDomChild(NodeType.Attribute, "", "attemptLimit");
		}

		public SchemaLong GetattemptLimitAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "attemptLimit", index)));
		}

		public SchemaLong GetattemptLimit()
		{
			return GetattemptLimitAt(0);
		}

		public SchemaLong attemptLimit
		{
			get
			{
				return GetattemptLimitAt(0);
			}
		}

		public void RemoveattemptLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "attemptLimit", index);
		}

		public void RemoveattemptLimit()
		{
			while (HasattemptLimit())
				RemoveattemptLimitAt(0);
		}

		public void AddattemptLimit(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "attemptLimit", newValue.ToString());
		}

		public void InsertattemptLimitAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "attemptLimit", index, newValue.ToString());
		}

		public void ReplaceattemptLimitAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "attemptLimit", index, newValue.ToString());
		}
		#endregion // attemptLimit accessor methods

		#region attemptLimit collection
        public attemptLimitCollection	MyattemptLimits = new attemptLimitCollection( );

        public class attemptLimitCollection: IEnumerable
        {
            limitConditionsType parent;
            public limitConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public attemptLimitEnumerator GetEnumerator() 
			{
				return new attemptLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class attemptLimitEnumerator: IEnumerator 
        {
			int nIndex;
			limitConditionsType parent;
			public attemptLimitEnumerator(limitConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.attemptLimitCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetattemptLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // attemptLimit collection

		#region attemptAbsoluteDurationLimit accessor methods
		public int GetattemptAbsoluteDurationLimitMinCount()
		{
			return 0;
		}

		public int attemptAbsoluteDurationLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetattemptAbsoluteDurationLimitMaxCount()
		{
			return 1;
		}

		public int attemptAbsoluteDurationLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetattemptAbsoluteDurationLimitCount()
		{
			return DomChildCount(NodeType.Attribute, "", "attemptAbsoluteDurationLimit");
		}

		public int attemptAbsoluteDurationLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "attemptAbsoluteDurationLimit");
			}
		}

		public bool HasattemptAbsoluteDurationLimit()
		{
			return HasDomChild(NodeType.Attribute, "", "attemptAbsoluteDurationLimit");
		}

		public SchemaString GetattemptAbsoluteDurationLimitAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "attemptAbsoluteDurationLimit", index)));
		}

		public SchemaString GetattemptAbsoluteDurationLimit()
		{
			return GetattemptAbsoluteDurationLimitAt(0);
		}

		public SchemaString attemptAbsoluteDurationLimit
		{
			get
			{
				return GetattemptAbsoluteDurationLimitAt(0);
			}
		}

		public void RemoveattemptAbsoluteDurationLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "attemptAbsoluteDurationLimit", index);
		}

		public void RemoveattemptAbsoluteDurationLimit()
		{
			while (HasattemptAbsoluteDurationLimit())
				RemoveattemptAbsoluteDurationLimitAt(0);
		}

		public void AddattemptAbsoluteDurationLimit(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "attemptAbsoluteDurationLimit", newValue.ToString());
		}

		public void InsertattemptAbsoluteDurationLimitAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "attemptAbsoluteDurationLimit", index, newValue.ToString());
		}

		public void ReplaceattemptAbsoluteDurationLimitAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "attemptAbsoluteDurationLimit", index, newValue.ToString());
		}
		#endregion // attemptAbsoluteDurationLimit accessor methods

		#region attemptAbsoluteDurationLimit collection
        public attemptAbsoluteDurationLimitCollection	MyattemptAbsoluteDurationLimits = new attemptAbsoluteDurationLimitCollection( );

        public class attemptAbsoluteDurationLimitCollection: IEnumerable
        {
            limitConditionsType parent;
            public limitConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public attemptAbsoluteDurationLimitEnumerator GetEnumerator() 
			{
				return new attemptAbsoluteDurationLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class attemptAbsoluteDurationLimitEnumerator: IEnumerator 
        {
			int nIndex;
			limitConditionsType parent;
			public attemptAbsoluteDurationLimitEnumerator(limitConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.attemptAbsoluteDurationLimitCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetattemptAbsoluteDurationLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // attemptAbsoluteDurationLimit collection

		#region attemptExperiencedDurationLimit accessor methods
		public int GetattemptExperiencedDurationLimitMinCount()
		{
			return 0;
		}

		public int attemptExperiencedDurationLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetattemptExperiencedDurationLimitMaxCount()
		{
			return 1;
		}

		public int attemptExperiencedDurationLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetattemptExperiencedDurationLimitCount()
		{
			return DomChildCount(NodeType.Attribute, "", "attemptExperiencedDurationLimit");
		}

		public int attemptExperiencedDurationLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "attemptExperiencedDurationLimit");
			}
		}

		public bool HasattemptExperiencedDurationLimit()
		{
			return HasDomChild(NodeType.Attribute, "", "attemptExperiencedDurationLimit");
		}

		public SchemaString GetattemptExperiencedDurationLimitAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "attemptExperiencedDurationLimit", index)));
		}

		public SchemaString GetattemptExperiencedDurationLimit()
		{
			return GetattemptExperiencedDurationLimitAt(0);
		}

		public SchemaString attemptExperiencedDurationLimit
		{
			get
			{
				return GetattemptExperiencedDurationLimitAt(0);
			}
		}

		public void RemoveattemptExperiencedDurationLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "attemptExperiencedDurationLimit", index);
		}

		public void RemoveattemptExperiencedDurationLimit()
		{
			while (HasattemptExperiencedDurationLimit())
				RemoveattemptExperiencedDurationLimitAt(0);
		}

		public void AddattemptExperiencedDurationLimit(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "attemptExperiencedDurationLimit", newValue.ToString());
		}

		public void InsertattemptExperiencedDurationLimitAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "attemptExperiencedDurationLimit", index, newValue.ToString());
		}

		public void ReplaceattemptExperiencedDurationLimitAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "attemptExperiencedDurationLimit", index, newValue.ToString());
		}
		#endregion // attemptExperiencedDurationLimit accessor methods

		#region attemptExperiencedDurationLimit collection
        public attemptExperiencedDurationLimitCollection	MyattemptExperiencedDurationLimits = new attemptExperiencedDurationLimitCollection( );

        public class attemptExperiencedDurationLimitCollection: IEnumerable
        {
            limitConditionsType parent;
            public limitConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public attemptExperiencedDurationLimitEnumerator GetEnumerator() 
			{
				return new attemptExperiencedDurationLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class attemptExperiencedDurationLimitEnumerator: IEnumerator 
        {
			int nIndex;
			limitConditionsType parent;
			public attemptExperiencedDurationLimitEnumerator(limitConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.attemptExperiencedDurationLimitCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetattemptExperiencedDurationLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // attemptExperiencedDurationLimit collection

		#region activityAbsoluteDurationLimit accessor methods
		public int GetactivityAbsoluteDurationLimitMinCount()
		{
			return 0;
		}

		public int activityAbsoluteDurationLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetactivityAbsoluteDurationLimitMaxCount()
		{
			return 1;
		}

		public int activityAbsoluteDurationLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetactivityAbsoluteDurationLimitCount()
		{
			return DomChildCount(NodeType.Attribute, "", "activityAbsoluteDurationLimit");
		}

		public int activityAbsoluteDurationLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "activityAbsoluteDurationLimit");
			}
		}

		public bool HasactivityAbsoluteDurationLimit()
		{
			return HasDomChild(NodeType.Attribute, "", "activityAbsoluteDurationLimit");
		}

		public SchemaString GetactivityAbsoluteDurationLimitAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "activityAbsoluteDurationLimit", index)));
		}

		public SchemaString GetactivityAbsoluteDurationLimit()
		{
			return GetactivityAbsoluteDurationLimitAt(0);
		}

		public SchemaString activityAbsoluteDurationLimit
		{
			get
			{
				return GetactivityAbsoluteDurationLimitAt(0);
			}
		}

		public void RemoveactivityAbsoluteDurationLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "activityAbsoluteDurationLimit", index);
		}

		public void RemoveactivityAbsoluteDurationLimit()
		{
			while (HasactivityAbsoluteDurationLimit())
				RemoveactivityAbsoluteDurationLimitAt(0);
		}

		public void AddactivityAbsoluteDurationLimit(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "activityAbsoluteDurationLimit", newValue.ToString());
		}

		public void InsertactivityAbsoluteDurationLimitAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "activityAbsoluteDurationLimit", index, newValue.ToString());
		}

		public void ReplaceactivityAbsoluteDurationLimitAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "activityAbsoluteDurationLimit", index, newValue.ToString());
		}
		#endregion // activityAbsoluteDurationLimit accessor methods

		#region activityAbsoluteDurationLimit collection
        public activityAbsoluteDurationLimitCollection	MyactivityAbsoluteDurationLimits = new activityAbsoluteDurationLimitCollection( );

        public class activityAbsoluteDurationLimitCollection: IEnumerable
        {
            limitConditionsType parent;
            public limitConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public activityAbsoluteDurationLimitEnumerator GetEnumerator() 
			{
				return new activityAbsoluteDurationLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class activityAbsoluteDurationLimitEnumerator: IEnumerator 
        {
			int nIndex;
			limitConditionsType parent;
			public activityAbsoluteDurationLimitEnumerator(limitConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.activityAbsoluteDurationLimitCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetactivityAbsoluteDurationLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // activityAbsoluteDurationLimit collection

		#region activityExperiencedDurationLimit accessor methods
		public int GetactivityExperiencedDurationLimitMinCount()
		{
			return 0;
		}

		public int activityExperiencedDurationLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetactivityExperiencedDurationLimitMaxCount()
		{
			return 1;
		}

		public int activityExperiencedDurationLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetactivityExperiencedDurationLimitCount()
		{
			return DomChildCount(NodeType.Attribute, "", "activityExperiencedDurationLimit");
		}

		public int activityExperiencedDurationLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "activityExperiencedDurationLimit");
			}
		}

		public bool HasactivityExperiencedDurationLimit()
		{
			return HasDomChild(NodeType.Attribute, "", "activityExperiencedDurationLimit");
		}

		public SchemaString GetactivityExperiencedDurationLimitAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "activityExperiencedDurationLimit", index)));
		}

		public SchemaString GetactivityExperiencedDurationLimit()
		{
			return GetactivityExperiencedDurationLimitAt(0);
		}

		public SchemaString activityExperiencedDurationLimit
		{
			get
			{
				return GetactivityExperiencedDurationLimitAt(0);
			}
		}

		public void RemoveactivityExperiencedDurationLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "activityExperiencedDurationLimit", index);
		}

		public void RemoveactivityExperiencedDurationLimit()
		{
			while (HasactivityExperiencedDurationLimit())
				RemoveactivityExperiencedDurationLimitAt(0);
		}

		public void AddactivityExperiencedDurationLimit(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "activityExperiencedDurationLimit", newValue.ToString());
		}

		public void InsertactivityExperiencedDurationLimitAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "activityExperiencedDurationLimit", index, newValue.ToString());
		}

		public void ReplaceactivityExperiencedDurationLimitAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "activityExperiencedDurationLimit", index, newValue.ToString());
		}
		#endregion // activityExperiencedDurationLimit accessor methods

		#region activityExperiencedDurationLimit collection
        public activityExperiencedDurationLimitCollection	MyactivityExperiencedDurationLimits = new activityExperiencedDurationLimitCollection( );

        public class activityExperiencedDurationLimitCollection: IEnumerable
        {
            limitConditionsType parent;
            public limitConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public activityExperiencedDurationLimitEnumerator GetEnumerator() 
			{
				return new activityExperiencedDurationLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class activityExperiencedDurationLimitEnumerator: IEnumerator 
        {
			int nIndex;
			limitConditionsType parent;
			public activityExperiencedDurationLimitEnumerator(limitConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.activityExperiencedDurationLimitCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetactivityExperiencedDurationLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // activityExperiencedDurationLimit collection

		#region beginTimeLimit accessor methods
		public int GetbeginTimeLimitMinCount()
		{
			return 0;
		}

		public int beginTimeLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetbeginTimeLimitMaxCount()
		{
			return 1;
		}

		public int beginTimeLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetbeginTimeLimitCount()
		{
			return DomChildCount(NodeType.Attribute, "", "beginTimeLimit");
		}

		public int beginTimeLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "beginTimeLimit");
			}
		}

		public bool HasbeginTimeLimit()
		{
			return HasDomChild(NodeType.Attribute, "", "beginTimeLimit");
		}

		public SchemaDateTime GetbeginTimeLimitAt(int index)
		{
			return new SchemaDateTime(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "beginTimeLimit", index)));
		}

		public SchemaDateTime GetbeginTimeLimit()
		{
			return GetbeginTimeLimitAt(0);
		}

		public SchemaDateTime beginTimeLimit
		{
			get
			{
				return GetbeginTimeLimitAt(0);
			}
		}

		public void RemovebeginTimeLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "beginTimeLimit", index);
		}

		public void RemovebeginTimeLimit()
		{
			while (HasbeginTimeLimit())
				RemovebeginTimeLimitAt(0);
		}

		public void AddbeginTimeLimit(SchemaDateTime newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "beginTimeLimit", newValue.ToString());
		}

		public void InsertbeginTimeLimitAt(SchemaDateTime newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "beginTimeLimit", index, newValue.ToString());
		}

		public void ReplacebeginTimeLimitAt(SchemaDateTime newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "beginTimeLimit", index, newValue.ToString());
		}
		#endregion // beginTimeLimit accessor methods

		#region beginTimeLimit collection
        public beginTimeLimitCollection	MybeginTimeLimits = new beginTimeLimitCollection( );

        public class beginTimeLimitCollection: IEnumerable
        {
            limitConditionsType parent;
            public limitConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public beginTimeLimitEnumerator GetEnumerator() 
			{
				return new beginTimeLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class beginTimeLimitEnumerator: IEnumerator 
        {
			int nIndex;
			limitConditionsType parent;
			public beginTimeLimitEnumerator(limitConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.beginTimeLimitCount );
			}
			public SchemaDateTime  Current 
			{
				get 
				{
					return(parent.GetbeginTimeLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // beginTimeLimit collection

		#region endTimeLimit accessor methods
		public int GetendTimeLimitMinCount()
		{
			return 0;
		}

		public int endTimeLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetendTimeLimitMaxCount()
		{
			return 1;
		}

		public int endTimeLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetendTimeLimitCount()
		{
			return DomChildCount(NodeType.Attribute, "", "endTimeLimit");
		}

		public int endTimeLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "endTimeLimit");
			}
		}

		public bool HasendTimeLimit()
		{
			return HasDomChild(NodeType.Attribute, "", "endTimeLimit");
		}

		public SchemaDateTime GetendTimeLimitAt(int index)
		{
			return new SchemaDateTime(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "endTimeLimit", index)));
		}

		public SchemaDateTime GetendTimeLimit()
		{
			return GetendTimeLimitAt(0);
		}

		public SchemaDateTime endTimeLimit
		{
			get
			{
				return GetendTimeLimitAt(0);
			}
		}

		public void RemoveendTimeLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "endTimeLimit", index);
		}

		public void RemoveendTimeLimit()
		{
			while (HasendTimeLimit())
				RemoveendTimeLimitAt(0);
		}

		public void AddendTimeLimit(SchemaDateTime newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "endTimeLimit", newValue.ToString());
		}

		public void InsertendTimeLimitAt(SchemaDateTime newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "endTimeLimit", index, newValue.ToString());
		}

		public void ReplaceendTimeLimitAt(SchemaDateTime newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "endTimeLimit", index, newValue.ToString());
		}
		#endregion // endTimeLimit accessor methods

		#region endTimeLimit collection
        public endTimeLimitCollection	MyendTimeLimits = new endTimeLimitCollection( );

        public class endTimeLimitCollection: IEnumerable
        {
            limitConditionsType parent;
            public limitConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public endTimeLimitEnumerator GetEnumerator() 
			{
				return new endTimeLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class endTimeLimitEnumerator: IEnumerator 
        {
			int nIndex;
			limitConditionsType parent;
			public endTimeLimitEnumerator(limitConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.endTimeLimitCount );
			}
			public SchemaDateTime  Current 
			{
				get 
				{
					return(parent.GetendTimeLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // endTimeLimit collection

        private void SetCollectionParents()
        {
            MyattemptLimits.Parent = this; 
            MyattemptAbsoluteDurationLimits.Parent = this; 
            MyattemptExperiencedDurationLimits.Parent = this; 
            MyactivityAbsoluteDurationLimits.Parent = this; 
            MyactivityExperiencedDurationLimits.Parent = this; 
            MybeginTimeLimits.Parent = this; 
            MyendTimeLimits.Parent = this; 
	}
}
}
