//
// sequencingRuleType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;

namespace imsss_v1p0
{
	public class sequencingRuleType : Altova.Node
	{
		#region Forward constructors
		public sequencingRuleType() : base() { SetCollectionParents(); }
		public sequencingRuleType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public sequencingRuleType(XmlNode node) : base(node) { SetCollectionParents(); }
		public sequencingRuleType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "ruleConditions");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "ruleConditions", i);
				InternalAdjustPrefix(DOMNode, true);
				new ruleConditionsType2(DOMNode).AdjustPrefix();
			}
		}


		#region ruleConditions accessor methods
		public int GetruleConditionsMinCount()
		{
			return 0;
		}

		public int ruleConditionsMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetruleConditionsMaxCount()
		{
			return 1;
		}

		public int ruleConditionsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetruleConditionsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "ruleConditions");
		}

		public int ruleConditionsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "ruleConditions");
			}
		}

		public bool HasruleConditions()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "ruleConditions");
		}

		public ruleConditionsType2 GetruleConditionsAt(int index)
		{
			return new ruleConditionsType2(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "ruleConditions", index));
		}

		public ruleConditionsType2 GetruleConditions()
		{
			return GetruleConditionsAt(0);
		}

		public ruleConditionsType2 ruleConditions
		{
			get
			{
				return GetruleConditionsAt(0);
			}
		}

		public void RemoveruleConditionsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "ruleConditions", index);
		}

		public void RemoveruleConditions()
		{
			while (HasruleConditions())
				RemoveruleConditionsAt(0);
		}

		public void AddruleConditions(ruleConditionsType2 newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "ruleConditions", newValue);
		}

		public void InsertruleConditionsAt(ruleConditionsType2 newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "ruleConditions", index, newValue);
		}

		public void ReplaceruleConditionsAt(ruleConditionsType2 newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "ruleConditions", index, newValue);
		}
		#endregion // ruleConditions accessor methods

		#region ruleConditions collection
        public ruleConditionsCollection	MyruleConditionss = new ruleConditionsCollection( );

        public class ruleConditionsCollection: IEnumerable
        {
            sequencingRuleType parent;
            public sequencingRuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ruleConditionsEnumerator GetEnumerator() 
			{
				return new ruleConditionsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ruleConditionsEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingRuleType parent;
			public ruleConditionsEnumerator(sequencingRuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ruleConditionsCount );
			}
			public ruleConditionsType2  Current 
			{
				get 
				{
					return(parent.GetruleConditionsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // ruleConditions collection

        private void SetCollectionParents()
        {
            MyruleConditionss.Parent = this; 
	}
}
}
