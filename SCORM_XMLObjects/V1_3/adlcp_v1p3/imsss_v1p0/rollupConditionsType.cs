//
// rollupConditionsType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;

namespace imsss_v1p0
{
	public class rollupConditionsType : Altova.Node
	{
		#region Forward constructors
		public rollupConditionsType() : base() { SetCollectionParents(); }
		public rollupConditionsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public rollupConditionsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public rollupConditionsType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "conditionCombination");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "conditionCombination", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupCondition");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupCondition", i);
				InternalAdjustPrefix(DOMNode, true);
				new rollupConditionType(DOMNode).AdjustPrefix();
			}
		}


		#region conditionCombination accessor methods
		public int GetconditionCombinationMinCount()
		{
			return 0;
		}

		public int conditionCombinationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetconditionCombinationMaxCount()
		{
			return 1;
		}

		public int conditionCombinationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetconditionCombinationCount()
		{
			return DomChildCount(NodeType.Attribute, "", "conditionCombination");
		}

		public int conditionCombinationCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "conditionCombination");
			}
		}

		public bool HasconditionCombination()
		{
			return HasDomChild(NodeType.Attribute, "", "conditionCombination");
		}

		public conditionCombinationType GetconditionCombinationAt(int index)
		{
			return new conditionCombinationType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "conditionCombination", index)));
		}

		public conditionCombinationType GetconditionCombination()
		{
			return GetconditionCombinationAt(0);
		}

		public conditionCombinationType conditionCombination
		{
			get
			{
				return GetconditionCombinationAt(0);
			}
		}

		public void RemoveconditionCombinationAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "conditionCombination", index);
		}

		public void RemoveconditionCombination()
		{
			while (HasconditionCombination())
				RemoveconditionCombinationAt(0);
		}

		public void AddconditionCombination(conditionCombinationType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "conditionCombination", newValue.ToString());
		}

		public void InsertconditionCombinationAt(conditionCombinationType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "conditionCombination", index, newValue.ToString());
		}

		public void ReplaceconditionCombinationAt(conditionCombinationType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "conditionCombination", index, newValue.ToString());
		}
		#endregion // conditionCombination accessor methods

		#region conditionCombination collection
        public conditionCombinationCollection	MyconditionCombinations = new conditionCombinationCollection( );

        public class conditionCombinationCollection: IEnumerable
        {
            rollupConditionsType parent;
            public rollupConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public conditionCombinationEnumerator GetEnumerator() 
			{
				return new conditionCombinationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class conditionCombinationEnumerator: IEnumerator 
        {
			int nIndex;
			rollupConditionsType parent;
			public conditionCombinationEnumerator(rollupConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.conditionCombinationCount );
			}
			public conditionCombinationType  Current 
			{
				get 
				{
					return(parent.GetconditionCombinationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // conditionCombination collection

		#region rollupCondition accessor methods
		public int GetrollupConditionMinCount()
		{
			return 1;
		}

		public int rollupConditionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupConditionMaxCount()
		{
			return Int32.MaxValue;
		}

		public int rollupConditionMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetrollupConditionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupCondition");
		}

		public int rollupConditionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupCondition");
			}
		}

		public bool HasrollupCondition()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupCondition");
		}

		public rollupConditionType GetrollupConditionAt(int index)
		{
			return new rollupConditionType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupCondition", index));
		}

		public rollupConditionType GetrollupCondition()
		{
			return GetrollupConditionAt(0);
		}

		public rollupConditionType rollupCondition
		{
			get
			{
				return GetrollupConditionAt(0);
			}
		}

		public void RemoverollupConditionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupCondition", index);
		}

		public void RemoverollupCondition()
		{
			while (HasrollupCondition())
				RemoverollupConditionAt(0);
		}

		public void AddrollupCondition(rollupConditionType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "rollupCondition", newValue);
		}

		public void InsertrollupConditionAt(rollupConditionType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupCondition", index, newValue);
		}

		public void ReplacerollupConditionAt(rollupConditionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupCondition", index, newValue);
		}
		#endregion // rollupCondition accessor methods

		#region rollupCondition collection
        public rollupConditionCollection	MyrollupConditions = new rollupConditionCollection( );

        public class rollupConditionCollection: IEnumerable
        {
            rollupConditionsType parent;
            public rollupConditionsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rollupConditionEnumerator GetEnumerator() 
			{
				return new rollupConditionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rollupConditionEnumerator: IEnumerator 
        {
			int nIndex;
			rollupConditionsType parent;
			public rollupConditionEnumerator(rollupConditionsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rollupConditionCount );
			}
			public rollupConditionType  Current 
			{
				get 
				{
					return(parent.GetrollupConditionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rollupCondition collection

        private void SetCollectionParents()
        {
            MyconditionCombinations.Parent = this; 
            MyrollupConditions.Parent = this; 
	}
}
}
