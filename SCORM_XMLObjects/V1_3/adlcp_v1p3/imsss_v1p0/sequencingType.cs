//
// sequencingType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class sequencingType : Altova.Node
	{
		#region Forward constructors
		public sequencingType() : base() { SetCollectionParents(); }
		public sequencingType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public sequencingType(XmlNode node) : base(node) { SetCollectionParents(); }
		public sequencingType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "ID");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "ID", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "IDRef");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "IDRef", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "controlMode");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "controlMode", i);
				InternalAdjustPrefix(DOMNode, true);
				new controlModeType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "sequencingRules");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "sequencingRules", i);
				InternalAdjustPrefix(DOMNode, true);
				new sequencingRulesType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "limitConditions");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "limitConditions", i);
				InternalAdjustPrefix(DOMNode, true);
				new limitConditionsType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "auxiliaryResources");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "auxiliaryResources", i);
				InternalAdjustPrefix(DOMNode, true);
				new auxiliaryResourcesType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRules");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRules", i);
				InternalAdjustPrefix(DOMNode, true);
				new rollupRulesType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "objectives");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "objectives", i);
				InternalAdjustPrefix(DOMNode, true);
				new objectivesType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "randomizationControls");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "randomizationControls", i);
				InternalAdjustPrefix(DOMNode, true);
				new randomizationType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "deliveryControls");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "deliveryControls", i);
				InternalAdjustPrefix(DOMNode, true);
				new deliveryControlsType(DOMNode).AdjustPrefix();
			}
			nCount = DomChildCount(NodeType.Element, "http://www.adlnet.org/xsd/adlseq_v1p3", "rollupConsiderations");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.adlnet.org/xsd/adlseq_v1p3", "rollupConsiderations", i);
				InternalAdjustPrefix(DOMNode, true);
				new deliveryControlsType(DOMNode).AdjustPrefix();
			}
						nCount = DomChildCount(NodeType.Element, "http://www.adlnet.org/xsd/adlseq_v1p3", "constrainedChoiceConsiderations");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.adlnet.org/xsd/adlseq_v1p3", "constrainedChoiceConsiderations", i);
				InternalAdjustPrefix(DOMNode, true);
				new deliveryControlsType(DOMNode).AdjustPrefix();
			}
		}


		#region ID accessor methods
		public int GetIDMinCount()
		{
			return 0;
		}

		public int IDMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetIDMaxCount()
		{
			return 1;
		}

		public int IDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIDCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ID");
		}

		public int IDCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ID");
			}
		}

		public bool HasID()
		{
			return HasDomChild(NodeType.Attribute, "", "ID");
		}

		public SchemaString GetIDAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ID", index)));
		}

		public SchemaString GetID()
		{
			return GetIDAt(0);
		}

		public SchemaString ID
		{
			get
			{
				return GetIDAt(0);
			}
		}

		public void RemoveIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ID", index);
		}

		public void RemoveID()
		{
			while (HasID())
				RemoveIDAt(0);
		}

		public void AddID(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "ID", newValue.ToString());
		}

		public void InsertIDAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "ID", index, newValue.ToString());
		}

		public void ReplaceIDAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ID", index, newValue.ToString());
		}
		#endregion // ID accessor methods

		#region ID collection
        public IDCollection	MyIDs = new IDCollection( );

        public class IDCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IDEnumerator GetEnumerator() 
			{
				return new IDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IDEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public IDEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IDCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // ID collection

		#region IDRef accessor methods
		public int GetIDRefMinCount()
		{
			return 0;
		}

		public int IDRefMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetIDRefMaxCount()
		{
			return 1;
		}

		public int IDRefMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIDRefCount()
		{
			return DomChildCount(NodeType.Attribute, "", "IDRef");
		}

		public int IDRefCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "IDRef");
			}
		}

		public bool HasIDRef()
		{
			return HasDomChild(NodeType.Attribute, "", "IDRef");
		}

		public SchemaString GetIDRefAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "IDRef", index)));
		}

		public SchemaString GetIDRef()
		{
			return GetIDRefAt(0);
		}

		public SchemaString IDRef
		{
			get
			{
				return GetIDRefAt(0);
			}
		}

		public void RemoveIDRefAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "IDRef", index);
		}

		public void RemoveIDRef()
		{
			while (HasIDRef())
				RemoveIDRefAt(0);
		}

		public void AddIDRef(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "IDRef", newValue.ToString());
		}

		public void InsertIDRefAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "IDRef", index, newValue.ToString());
		}

		public void ReplaceIDRefAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "IDRef", index, newValue.ToString());
		}
		#endregion // IDRef accessor methods

		#region IDRef collection
        public IDRefCollection	MyIDRefs = new IDRefCollection( );

        public class IDRefCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IDRefEnumerator GetEnumerator() 
			{
				return new IDRefEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IDRefEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public IDRefEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IDRefCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetIDRefAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // IDRef collection

		#region controlMode accessor methods
		public int GetcontrolModeMinCount()
		{
			return 0;
		}

		public int controlModeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetcontrolModeMaxCount()
		{
			return 1;
		}

		public int controlModeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcontrolModeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "controlMode");
		}

		public int controlModeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "controlMode");
			}
		}

		public bool HascontrolMode()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "controlMode");
		}

		public controlModeType GetcontrolModeAt(int index)
		{
			return new controlModeType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "controlMode", index));
		}

		public controlModeType GetcontrolMode()
		{
			return GetcontrolModeAt(0);
		}

		public controlModeType controlMode
		{
			get
			{
				return GetcontrolModeAt(0);
			}
		}

		public void RemovecontrolModeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "controlMode", index);
		}

		public void RemovecontrolMode()
		{
			while (HascontrolMode())
				RemovecontrolModeAt(0);
		}

		public void AddcontrolMode(controlModeType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "controlMode", newValue);
		}

		public void InsertcontrolModeAt(controlModeType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "controlMode", index, newValue);
		}

		public void ReplacecontrolModeAt(controlModeType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "controlMode", index, newValue);
		}
		#endregion // controlMode accessor methods

		#region controlMode collection
        public controlModeCollection	MycontrolModes = new controlModeCollection( );

        public class controlModeCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public controlModeEnumerator GetEnumerator() 
			{
				return new controlModeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class controlModeEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public controlModeEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.controlModeCount );
			}
			public controlModeType  Current 
			{
				get 
				{
					return(parent.GetcontrolModeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // controlMode collection

		#region sequencingRules accessor methods
		public int GetsequencingRulesMinCount()
		{
			return 0;
		}

		public int sequencingRulesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetsequencingRulesMaxCount()
		{
			return 1;
		}

		public int sequencingRulesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsequencingRulesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "sequencingRules");
		}

		public int sequencingRulesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "sequencingRules");
			}
		}

		public bool HassequencingRules()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "sequencingRules");
		}

		public sequencingRulesType GetsequencingRulesAt(int index)
		{
			return new sequencingRulesType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "sequencingRules", index));
		}

		public sequencingRulesType GetsequencingRules()
		{
			return GetsequencingRulesAt(0);
		}

		public sequencingRulesType sequencingRules
		{
			get
			{
				return GetsequencingRulesAt(0);
			}
		}

		public void RemovesequencingRulesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "sequencingRules", index);
		}

		public void RemovesequencingRules()
		{
			while (HassequencingRules())
				RemovesequencingRulesAt(0);
		}

		public void AddsequencingRules(sequencingRulesType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "sequencingRules", newValue);
		}

		public void InsertsequencingRulesAt(sequencingRulesType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "sequencingRules", index, newValue);
		}

		public void ReplacesequencingRulesAt(sequencingRulesType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "sequencingRules", index, newValue);
		}
		#endregion // sequencingRules accessor methods

		#region sequencingRules collection
        public sequencingRulesCollection	MysequencingRuless = new sequencingRulesCollection( );

        public class sequencingRulesCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public sequencingRulesEnumerator GetEnumerator() 
			{
				return new sequencingRulesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class sequencingRulesEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public sequencingRulesEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.sequencingRulesCount );
			}
			public sequencingRulesType  Current 
			{
				get 
				{
					return(parent.GetsequencingRulesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // sequencingRules collection

		#region limitConditions accessor methods
		public int GetlimitConditionsMinCount()
		{
			return 0;
		}

		public int limitConditionsMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetlimitConditionsMaxCount()
		{
			return 1;
		}

		public int limitConditionsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlimitConditionsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "limitConditions");
		}

		public int limitConditionsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "limitConditions");
			}
		}

		public bool HaslimitConditions()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "limitConditions");
		}

		public limitConditionsType GetlimitConditionsAt(int index)
		{
			return new limitConditionsType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "limitConditions", index));
		}

		public limitConditionsType GetlimitConditions()
		{
			return GetlimitConditionsAt(0);
		}

		public limitConditionsType limitConditions
		{
			get
			{
				return GetlimitConditionsAt(0);
			}
		}

		public void RemovelimitConditionsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "limitConditions", index);
		}

		public void RemovelimitConditions()
		{
			while (HaslimitConditions())
				RemovelimitConditionsAt(0);
		}

		public void AddlimitConditions(limitConditionsType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "limitConditions", newValue);
		}

		public void InsertlimitConditionsAt(limitConditionsType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "limitConditions", index, newValue);
		}

		public void ReplacelimitConditionsAt(limitConditionsType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "limitConditions", index, newValue);
		}
		#endregion // limitConditions accessor methods

		#region limitConditions collection
        public limitConditionsCollection	MylimitConditionss = new limitConditionsCollection( );

        public class limitConditionsCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public limitConditionsEnumerator GetEnumerator() 
			{
				return new limitConditionsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class limitConditionsEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public limitConditionsEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.limitConditionsCount );
			}
			public limitConditionsType  Current 
			{
				get 
				{
					return(parent.GetlimitConditionsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // limitConditions collection

		#region auxiliaryResources accessor methods
		public int GetauxiliaryResourcesMinCount()
		{
			return 0;
		}

		public int auxiliaryResourcesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetauxiliaryResourcesMaxCount()
		{
			return 1;
		}

		public int auxiliaryResourcesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetauxiliaryResourcesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "auxiliaryResources");
		}

		public int auxiliaryResourcesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "auxiliaryResources");
			}
		}

		public bool HasauxiliaryResources()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "auxiliaryResources");
		}

		public auxiliaryResourcesType GetauxiliaryResourcesAt(int index)
		{
			return new auxiliaryResourcesType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "auxiliaryResources", index));
		}

		public auxiliaryResourcesType GetauxiliaryResources()
		{
			return GetauxiliaryResourcesAt(0);
		}

		public auxiliaryResourcesType auxiliaryResources
		{
			get
			{
				return GetauxiliaryResourcesAt(0);
			}
		}

		public void RemoveauxiliaryResourcesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "auxiliaryResources", index);
		}

		public void RemoveauxiliaryResources()
		{
			while (HasauxiliaryResources())
				RemoveauxiliaryResourcesAt(0);
		}

		public void AddauxiliaryResources(auxiliaryResourcesType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "auxiliaryResources", newValue);
		}

		public void InsertauxiliaryResourcesAt(auxiliaryResourcesType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "auxiliaryResources", index, newValue);
		}

		public void ReplaceauxiliaryResourcesAt(auxiliaryResourcesType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "auxiliaryResources", index, newValue);
		}
		#endregion // auxiliaryResources accessor methods

		#region auxiliaryResources collection
        public auxiliaryResourcesCollection	MyauxiliaryResourcess = new auxiliaryResourcesCollection( );

        public class auxiliaryResourcesCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public auxiliaryResourcesEnumerator GetEnumerator() 
			{
				return new auxiliaryResourcesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class auxiliaryResourcesEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public auxiliaryResourcesEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.auxiliaryResourcesCount );
			}
			public auxiliaryResourcesType  Current 
			{
				get 
				{
					return(parent.GetauxiliaryResourcesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // auxiliaryResources collection

		#region rollupRules accessor methods
		public int GetrollupRulesMinCount()
		{
			return 0;
		}

		public int rollupRulesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrollupRulesMaxCount()
		{
			return 1;
		}

		public int rollupRulesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrollupRulesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRules");
		}

		public int rollupRulesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRules");
			}
		}

		public bool HasrollupRules()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRules");
		}

		public rollupRulesType GetrollupRulesAt(int index)
		{
			return new rollupRulesType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRules", index));
		}

		public rollupRulesType GetrollupRules()
		{
			return GetrollupRulesAt(0);
		}

		public rollupRulesType rollupRules
		{
			get
			{
				return GetrollupRulesAt(0);
			}
		}

		public void RemoverollupRulesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "rollupRules", index);
		}

		public void RemoverollupRules()
		{
			while (HasrollupRules())
				RemoverollupRulesAt(0);
		}

		public void AddrollupRules(rollupRulesType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "rollupRules", newValue);
		}

		public void InsertrollupRulesAt(rollupRulesType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupRules", index, newValue);
		}

		public void ReplacerollupRulesAt(rollupRulesType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "rollupRules", index, newValue);
		}
		#endregion // rollupRules accessor methods

		#region rollupRules collection
        public rollupRulesCollection	MyrollupRuless = new rollupRulesCollection( );

        public class rollupRulesCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rollupRulesEnumerator GetEnumerator() 
			{
				return new rollupRulesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rollupRulesEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public rollupRulesEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rollupRulesCount );
			}
			public rollupRulesType  Current 
			{
				get 
				{
					return(parent.GetrollupRulesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rollupRules collection

		#region objectives accessor methods
		public int GetobjectivesMinCount()
		{
			return 0;
		}

		public int objectivesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetobjectivesMaxCount()
		{
			return 1;
		}

		public int objectivesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetobjectivesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "objectives");
		}

		public int objectivesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "objectives");
			}
		}

		public bool Hasobjectives()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "objectives");
		}

		public objectivesType GetobjectivesAt(int index)
		{
			return new objectivesType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "objectives", index));
		}

		public objectivesType Getobjectives()
		{
			return GetobjectivesAt(0);
		}

		public objectivesType objectives
		{
			get
			{
				return GetobjectivesAt(0);
			}
		}

		public void RemoveobjectivesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "objectives", index);
		}

		public void Removeobjectives()
		{
			while (Hasobjectives())
				RemoveobjectivesAt(0);
		}

		public void Addobjectives(objectivesType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "objectives", newValue);
		}

		public void InsertobjectivesAt(objectivesType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "objectives", index, newValue);
		}

		public void ReplaceobjectivesAt(objectivesType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "objectives", index, newValue);
		}
		#endregion // objectives accessor methods

		#region objectives collection
        public objectivesCollection	Myobjectivess = new objectivesCollection( );

        public class objectivesCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public objectivesEnumerator GetEnumerator() 
			{
				return new objectivesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class objectivesEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public objectivesEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.objectivesCount );
			}
			public objectivesType  Current 
			{
				get 
				{
					return(parent.GetobjectivesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // objectives collection

		#region randomizationControls accessor methods
		public int GetrandomizationControlsMinCount()
		{
			return 0;
		}

		public int randomizationControlsMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrandomizationControlsMaxCount()
		{
			return 1;
		}

		public int randomizationControlsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrandomizationControlsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "randomizationControls");
		}

		public int randomizationControlsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "randomizationControls");
			}
		}

		public bool HasrandomizationControls()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "randomizationControls");
		}

		public randomizationType GetrandomizationControlsAt(int index)
		{
			return new randomizationType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "randomizationControls", index));
		}

		public randomizationType GetrandomizationControls()
		{
			return GetrandomizationControlsAt(0);
		}

		public randomizationType randomizationControls
		{
			get
			{
				return GetrandomizationControlsAt(0);
			}
		}

		public void RemoverandomizationControlsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "randomizationControls", index);
		}

		public void RemoverandomizationControls()
		{
			while (HasrandomizationControls())
				RemoverandomizationControlsAt(0);
		}

		public void AddrandomizationControls(randomizationType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "randomizationControls", newValue);
		}

		public void InsertrandomizationControlsAt(randomizationType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "randomizationControls", index, newValue);
		}

		public void ReplacerandomizationControlsAt(randomizationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "randomizationControls", index, newValue);
		}
		#endregion // randomizationControls accessor methods

		#region randomizationControls collection
        public randomizationControlsCollection	MyrandomizationControlss = new randomizationControlsCollection( );

        public class randomizationControlsCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public randomizationControlsEnumerator GetEnumerator() 
			{
				return new randomizationControlsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class randomizationControlsEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public randomizationControlsEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.randomizationControlsCount );
			}
			public randomizationType  Current 
			{
				get 
				{
					return(parent.GetrandomizationControlsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // randomizationControls collection

		#region deliveryControls accessor methods
		public int GetdeliveryControlsMinCount()
		{
			return 0;
		}

		public int deliveryControlsMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdeliveryControlsMaxCount()
		{
			return 1;
		}

		public int deliveryControlsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdeliveryControlsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "deliveryControls");
		}

		public int deliveryControlsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "deliveryControls");
			}
		}

		public bool HasdeliveryControls()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "deliveryControls");
		}

		public deliveryControlsType GetdeliveryControlsAt(int index)
		{
			return new deliveryControlsType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "deliveryControls", index));
		}

		public deliveryControlsType GetdeliveryControls()
		{
			return GetdeliveryControlsAt(0);
		}

		public deliveryControlsType deliveryControls
		{
			get
			{
				return GetdeliveryControlsAt(0);
			}
		}

		public void RemovedeliveryControlsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsss", "deliveryControls", index);
		}

		public void RemovedeliveryControls()
		{
			while (HasdeliveryControls())
				RemovedeliveryControlsAt(0);
		}

		public void AdddeliveryControls(deliveryControlsType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsss", "deliveryControls", newValue);
		}

		public void InsertdeliveryControlsAt(deliveryControlsType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsss", "deliveryControls", index, newValue);
		}

		public void ReplacedeliveryControlsAt(deliveryControlsType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsss", "deliveryControls", index, newValue);
		}
		#endregion // deliveryControls accessor methods

		#region deliveryControls collection
        public deliveryControlsCollection	MydeliveryControlss = new deliveryControlsCollection( );

        public class deliveryControlsCollection: IEnumerable
        {
            sequencingType parent;
            public sequencingType Parent
			{
				set
				{
					parent = value;
				}
			}
			public deliveryControlsEnumerator GetEnumerator() 
			{
				return new deliveryControlsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class deliveryControlsEnumerator: IEnumerator 
        {
			int nIndex;
			sequencingType parent;
			public deliveryControlsEnumerator(sequencingType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.deliveryControlsCount );
			}
			public deliveryControlsType  Current 
			{
				get 
				{
					return(parent.GetdeliveryControlsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // deliveryControls collection

        public virtual void SetCollectionParents()
        {
            MyIDs.Parent = this; 
            MyIDRefs.Parent = this; 
            MycontrolModes.Parent = this; 
            MysequencingRuless.Parent = this; 
            MylimitConditionss.Parent = this; 
            MyauxiliaryResourcess.Parent = this; 
            MyrollupRuless.Parent = this; 
            Myobjectivess.Parent = this; 
            MyrandomizationControlss.Parent = this; 
            MydeliveryControlss.Parent = this; 
	}
}
}
