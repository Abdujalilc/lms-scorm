//
// mapInfoType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsss_v1p0
{
	public class mapInfoType : Altova.Node
	{
		#region Forward constructors
		public mapInfoType() : base() { SetCollectionParents(); }
		public mapInfoType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public mapInfoType(XmlNode node) : base(node) { SetCollectionParents(); }
		public mapInfoType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "targetObjectiveID");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "targetObjectiveID", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "readSatisfiedStatus");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "readSatisfiedStatus", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "readNormalizedMeasure");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "readNormalizedMeasure", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "writeSatisfiedStatus");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "writeSatisfiedStatus", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "writeNormalizedMeasure");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "writeNormalizedMeasure", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region targetObjectiveID accessor methods
		public int GettargetObjectiveIDMinCount()
		{
			return 1;
		}

		public int targetObjectiveIDMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GettargetObjectiveIDMaxCount()
		{
			return 1;
		}

		public int targetObjectiveIDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettargetObjectiveIDCount()
		{
			return DomChildCount(NodeType.Attribute, "", "targetObjectiveID");
		}

		public int targetObjectiveIDCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "targetObjectiveID");
			}
		}

		public bool HastargetObjectiveID()
		{
			return HasDomChild(NodeType.Attribute, "", "targetObjectiveID");
		}

		public SchemaString GettargetObjectiveIDAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "targetObjectiveID", index)));
		}

		public SchemaString GettargetObjectiveID()
		{
			return GettargetObjectiveIDAt(0);
		}

		public SchemaString targetObjectiveID
		{
			get
			{
				return GettargetObjectiveIDAt(0);
			}
		}

		public void RemovetargetObjectiveIDAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "targetObjectiveID", index);
		}

		public void RemovetargetObjectiveID()
		{
			while (HastargetObjectiveID())
				RemovetargetObjectiveIDAt(0);
		}

		public void AddtargetObjectiveID(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "targetObjectiveID", newValue.ToString());
		}

		public void InserttargetObjectiveIDAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "targetObjectiveID", index, newValue.ToString());
		}

		public void ReplacetargetObjectiveIDAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "targetObjectiveID", index, newValue.ToString());
		}
		#endregion // targetObjectiveID accessor methods

		#region targetObjectiveID collection
        public targetObjectiveIDCollection	MytargetObjectiveIDs = new targetObjectiveIDCollection( );

        public class targetObjectiveIDCollection: IEnumerable
        {
            mapInfoType parent;
            public mapInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public targetObjectiveIDEnumerator GetEnumerator() 
			{
				return new targetObjectiveIDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class targetObjectiveIDEnumerator: IEnumerator 
        {
			int nIndex;
			mapInfoType parent;
			public targetObjectiveIDEnumerator(mapInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.targetObjectiveIDCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GettargetObjectiveIDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // targetObjectiveID collection

		#region readSatisfiedStatus accessor methods
		public int GetreadSatisfiedStatusMinCount()
		{
			return 0;
		}

		public int readSatisfiedStatusMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetreadSatisfiedStatusMaxCount()
		{
			return 1;
		}

		public int readSatisfiedStatusMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetreadSatisfiedStatusCount()
		{
			return DomChildCount(NodeType.Attribute, "", "readSatisfiedStatus");
		}

		public int readSatisfiedStatusCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "readSatisfiedStatus");
			}
		}

		public bool HasreadSatisfiedStatus()
		{
			return HasDomChild(NodeType.Attribute, "", "readSatisfiedStatus");
		}

		public SchemaBoolean GetreadSatisfiedStatusAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "readSatisfiedStatus", index)));
		}

		public SchemaBoolean GetreadSatisfiedStatus()
		{
			return GetreadSatisfiedStatusAt(0);
		}

		public SchemaBoolean readSatisfiedStatus
		{
			get
			{
				return GetreadSatisfiedStatusAt(0);
			}
		}

		public void RemovereadSatisfiedStatusAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "readSatisfiedStatus", index);
		}

		public void RemovereadSatisfiedStatus()
		{
			while (HasreadSatisfiedStatus())
				RemovereadSatisfiedStatusAt(0);
		}

		public void AddreadSatisfiedStatus(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "readSatisfiedStatus", newValue.ToString());
		}

		public void InsertreadSatisfiedStatusAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "readSatisfiedStatus", index, newValue.ToString());
		}

		public void ReplacereadSatisfiedStatusAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "readSatisfiedStatus", index, newValue.ToString());
		}
		#endregion // readSatisfiedStatus accessor methods

		#region readSatisfiedStatus collection
        public readSatisfiedStatusCollection	MyreadSatisfiedStatuss = new readSatisfiedStatusCollection( );

        public class readSatisfiedStatusCollection: IEnumerable
        {
            mapInfoType parent;
            public mapInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public readSatisfiedStatusEnumerator GetEnumerator() 
			{
				return new readSatisfiedStatusEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class readSatisfiedStatusEnumerator: IEnumerator 
        {
			int nIndex;
			mapInfoType parent;
			public readSatisfiedStatusEnumerator(mapInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.readSatisfiedStatusCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetreadSatisfiedStatusAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // readSatisfiedStatus collection

		#region readNormalizedMeasure accessor methods
		public int GetreadNormalizedMeasureMinCount()
		{
			return 0;
		}

		public int readNormalizedMeasureMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetreadNormalizedMeasureMaxCount()
		{
			return 1;
		}

		public int readNormalizedMeasureMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetreadNormalizedMeasureCount()
		{
			return DomChildCount(NodeType.Attribute, "", "readNormalizedMeasure");
		}

		public int readNormalizedMeasureCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "readNormalizedMeasure");
			}
		}

		public bool HasreadNormalizedMeasure()
		{
			return HasDomChild(NodeType.Attribute, "", "readNormalizedMeasure");
		}

		public SchemaBoolean GetreadNormalizedMeasureAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "readNormalizedMeasure", index)));
		}

		public SchemaBoolean GetreadNormalizedMeasure()
		{
			return GetreadNormalizedMeasureAt(0);
		}

		public SchemaBoolean readNormalizedMeasure
		{
			get
			{
				return GetreadNormalizedMeasureAt(0);
			}
		}

		public void RemovereadNormalizedMeasureAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "readNormalizedMeasure", index);
		}

		public void RemovereadNormalizedMeasure()
		{
			while (HasreadNormalizedMeasure())
				RemovereadNormalizedMeasureAt(0);
		}

		public void AddreadNormalizedMeasure(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "readNormalizedMeasure", newValue.ToString());
		}

		public void InsertreadNormalizedMeasureAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "readNormalizedMeasure", index, newValue.ToString());
		}

		public void ReplacereadNormalizedMeasureAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "readNormalizedMeasure", index, newValue.ToString());
		}
		#endregion // readNormalizedMeasure accessor methods

		#region readNormalizedMeasure collection
        public readNormalizedMeasureCollection	MyreadNormalizedMeasures = new readNormalizedMeasureCollection( );

        public class readNormalizedMeasureCollection: IEnumerable
        {
            mapInfoType parent;
            public mapInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public readNormalizedMeasureEnumerator GetEnumerator() 
			{
				return new readNormalizedMeasureEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class readNormalizedMeasureEnumerator: IEnumerator 
        {
			int nIndex;
			mapInfoType parent;
			public readNormalizedMeasureEnumerator(mapInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.readNormalizedMeasureCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetreadNormalizedMeasureAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // readNormalizedMeasure collection

		#region writeSatisfiedStatus accessor methods
		public int GetwriteSatisfiedStatusMinCount()
		{
			return 0;
		}

		public int writeSatisfiedStatusMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetwriteSatisfiedStatusMaxCount()
		{
			return 1;
		}

		public int writeSatisfiedStatusMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetwriteSatisfiedStatusCount()
		{
			return DomChildCount(NodeType.Attribute, "", "writeSatisfiedStatus");
		}

		public int writeSatisfiedStatusCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "writeSatisfiedStatus");
			}
		}

		public bool HaswriteSatisfiedStatus()
		{
			return HasDomChild(NodeType.Attribute, "", "writeSatisfiedStatus");
		}

		public SchemaBoolean GetwriteSatisfiedStatusAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "writeSatisfiedStatus", index)));
		}

		public SchemaBoolean GetwriteSatisfiedStatus()
		{
			return GetwriteSatisfiedStatusAt(0);
		}

		public SchemaBoolean writeSatisfiedStatus
		{
			get
			{
				return GetwriteSatisfiedStatusAt(0);
			}
		}

		public void RemovewriteSatisfiedStatusAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "writeSatisfiedStatus", index);
		}

		public void RemovewriteSatisfiedStatus()
		{
			while (HaswriteSatisfiedStatus())
				RemovewriteSatisfiedStatusAt(0);
		}

		public void AddwriteSatisfiedStatus(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "writeSatisfiedStatus", newValue.ToString());
		}

		public void InsertwriteSatisfiedStatusAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "writeSatisfiedStatus", index, newValue.ToString());
		}

		public void ReplacewriteSatisfiedStatusAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "writeSatisfiedStatus", index, newValue.ToString());
		}
		#endregion // writeSatisfiedStatus accessor methods

		#region writeSatisfiedStatus collection
        public writeSatisfiedStatusCollection	MywriteSatisfiedStatuss = new writeSatisfiedStatusCollection( );

        public class writeSatisfiedStatusCollection: IEnumerable
        {
            mapInfoType parent;
            public mapInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public writeSatisfiedStatusEnumerator GetEnumerator() 
			{
				return new writeSatisfiedStatusEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class writeSatisfiedStatusEnumerator: IEnumerator 
        {
			int nIndex;
			mapInfoType parent;
			public writeSatisfiedStatusEnumerator(mapInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.writeSatisfiedStatusCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetwriteSatisfiedStatusAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // writeSatisfiedStatus collection

		#region writeNormalizedMeasure accessor methods
		public int GetwriteNormalizedMeasureMinCount()
		{
			return 0;
		}

		public int writeNormalizedMeasureMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetwriteNormalizedMeasureMaxCount()
		{
			return 1;
		}

		public int writeNormalizedMeasureMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetwriteNormalizedMeasureCount()
		{
			return DomChildCount(NodeType.Attribute, "", "writeNormalizedMeasure");
		}

		public int writeNormalizedMeasureCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "writeNormalizedMeasure");
			}
		}

		public bool HaswriteNormalizedMeasure()
		{
			return HasDomChild(NodeType.Attribute, "", "writeNormalizedMeasure");
		}

		public SchemaBoolean GetwriteNormalizedMeasureAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "writeNormalizedMeasure", index)));
		}

		public SchemaBoolean GetwriteNormalizedMeasure()
		{
			return GetwriteNormalizedMeasureAt(0);
		}

		public SchemaBoolean writeNormalizedMeasure
		{
			get
			{
				return GetwriteNormalizedMeasureAt(0);
			}
		}

		public void RemovewriteNormalizedMeasureAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "writeNormalizedMeasure", index);
		}

		public void RemovewriteNormalizedMeasure()
		{
			while (HaswriteNormalizedMeasure())
				RemovewriteNormalizedMeasureAt(0);
		}

		public void AddwriteNormalizedMeasure(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "writeNormalizedMeasure", newValue.ToString());
		}

		public void InsertwriteNormalizedMeasureAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "writeNormalizedMeasure", index, newValue.ToString());
		}

		public void ReplacewriteNormalizedMeasureAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "writeNormalizedMeasure", index, newValue.ToString());
		}
		#endregion // writeNormalizedMeasure accessor methods

		#region writeNormalizedMeasure collection
        public writeNormalizedMeasureCollection	MywriteNormalizedMeasures = new writeNormalizedMeasureCollection( );

        public class writeNormalizedMeasureCollection: IEnumerable
        {
            mapInfoType parent;
            public mapInfoType Parent
			{
				set
				{
					parent = value;
				}
			}
			public writeNormalizedMeasureEnumerator GetEnumerator() 
			{
				return new writeNormalizedMeasureEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class writeNormalizedMeasureEnumerator: IEnumerator 
        {
			int nIndex;
			mapInfoType parent;
			public writeNormalizedMeasureEnumerator(mapInfoType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.writeNormalizedMeasureCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetwriteNormalizedMeasureAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // writeNormalizedMeasure collection

        private void SetCollectionParents()
        {
            MytargetObjectiveIDs.Parent = this; 
            MyreadSatisfiedStatuss.Parent = this; 
            MyreadNormalizedMeasures.Parent = this; 
            MywriteSatisfiedStatuss.Parent = this; 
            MywriteNormalizedMeasures.Parent = this; 
	}
}
}
