//
// resourcesType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imscp_v1p1
{
	public class resourcesType : Altova.Node
	{
		#region Forward constructors
		public resourcesType() : base() { SetCollectionParents(); }
		public resourcesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public resourcesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public resourcesType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resource");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resource", i);
				InternalAdjustPrefix(DOMNode, false);
				new resourceTypeExtended(DOMNode).AdjustPrefix();
			}
		}


		#region base2 accessor methods
		public int Getbase2MinCount()
		{
			return 0;
		}

		public int base2MinCount
		{
			get
			{
				return 0;
			}
		}

		public int Getbase2MaxCount()
		{
			return 1;
		}

		public int base2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getbase2Count()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
		}

		public int base2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
			}
		}

		public bool Hasbase2()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
		}

		public SchemaString Getbase2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index)));
		}

		public SchemaString Getbase2()
		{
			return Getbase2At(0);
		}

		public SchemaString base2
		{
			get
			{
				return Getbase2At(0);
			}
		}

		public void Removebase2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index);
		}

		public void Removebase2()
		{
			while (Hasbase2())
				Removebase2At(0);
		}

		public void Addbase2(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", newValue.ToString());
		}

		public void Insertbase2At(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index, newValue.ToString());
		}

		public void Replacebase2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index, newValue.ToString());
		}
		#endregion // base2 accessor methods

		#region base2 collection
        public base2Collection	Mybase2s = new base2Collection( );

        public class base2Collection: IEnumerable
        {
            resourcesType parent;
            public resourcesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public base2Enumerator GetEnumerator() 
			{
				return new base2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class base2Enumerator: IEnumerator 
        {
			int nIndex;
			resourcesType parent;
			public base2Enumerator(resourcesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.base2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getbase2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // base2 collection

		#region resource accessor methods
		public int GetresourceMinCount()
		{
			return 0;
		}

		public int resourceMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetresourceMaxCount()
		{
			return Int32.MaxValue;
		}

		public int resourceMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetresourceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resource");
		}

		public int resourceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resource");
			}
		}

		public bool Hasresource()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resource");
		}

		public resourceTypeExtended GetresourceAt(int index)
		{
			return new resourceTypeExtended(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resource", index));
		}

		public resourceTypeExtended Getresource()
		{
			return GetresourceAt(0);
		}

		public resourceTypeExtended resource
		{
			get
			{
				return GetresourceAt(0);
			}
		}

		public void RemoveresourceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resource", index);
		}

		public void Removeresource()
		{
			while (Hasresource())
				RemoveresourceAt(0);
		}

		public void Addresource(resourceTypeExtended newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imscp_v1p1", "resource", newValue);
		}

		public void InsertresourceAt(resourceTypeExtended newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "resource", index, newValue);
		}

		public void ReplaceresourceAt(resourceTypeExtended newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "resource", index, newValue);
		}
		#endregion // resource accessor methods

		#region resource collection
        public resourceCollection	Myresources = new resourceCollection( );

        public class resourceCollection: IEnumerable
        {
            resourcesType parent;
            public resourcesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public resourceEnumerator GetEnumerator() 
			{
				return new resourceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class resourceEnumerator: IEnumerator 
        {
			int nIndex;
			resourcesType parent;
			public resourceEnumerator(resourcesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.resourceCount );
			}
			public resourceTypeExtended  Current 
			{
				get 
				{
					return(parent.GetresourceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // resource collection

        private void SetCollectionParents()
        {
            Mybase2s.Parent = this; 
            Myresources.Parent = this; 
	}
}
}
