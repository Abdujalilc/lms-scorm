//
// manifestType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imscp_v1p1
{
	public class manifestType : Altova.Node
	{
		#region Forward constructors
		public manifestType() : base() { SetCollectionParents(); }
		public manifestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public manifestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public manifestType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "identifier");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "identifier", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "version");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "version", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "metadata");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "metadata", i);
				InternalAdjustPrefix(DOMNode, false);
				new metadataType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "organizations");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "organizations", i);
				InternalAdjustPrefix(DOMNode, false);
				new organizationsType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resources");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resources", i);
				InternalAdjustPrefix(DOMNode, false);
				new resourcesType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "manifest");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "manifest", i);
				InternalAdjustPrefix(DOMNode, false);
				new manifestType(DOMNode).AdjustPrefix();
			}
		}


		#region identifier accessor methods
		public int GetidentifierMinCount()
		{
			return 1;
		}

		public int identifierMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidentifierMaxCount()
		{
			return 1;
		}

		public int identifierMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidentifierCount()
		{
			return DomChildCount(NodeType.Attribute, "", "identifier");
		}

		public int identifierCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "identifier");
			}
		}

		public bool Hasidentifier()
		{
			return HasDomChild(NodeType.Attribute, "", "identifier");
		}

		public SchemaString GetidentifierAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "identifier", index)));
		}

		public SchemaString Getidentifier()
		{
			return GetidentifierAt(0);
		}

		public SchemaString identifier
		{
			get
			{
				return GetidentifierAt(0);
			}
		}

		public void RemoveidentifierAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "identifier", index);
		}

		public void Removeidentifier()
		{
			while (Hasidentifier())
				RemoveidentifierAt(0);
		}

		public void Addidentifier(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "identifier", newValue.ToString());
		}

		public void InsertidentifierAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "identifier", index, newValue.ToString());
		}

		public void ReplaceidentifierAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "identifier", index, newValue.ToString());
		}
		#endregion // identifier accessor methods

		#region identifier collection
		public identifierCollection	Myidentifiers = new identifierCollection( );

		public class identifierCollection: IEnumerable
		{
			manifestType parent;
			public manifestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public identifierEnumerator GetEnumerator() 
			{
				return new identifierEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
		}

		public class identifierEnumerator: IEnumerator 
		{
			int nIndex;
			manifestType parent;
			public identifierEnumerator(manifestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.identifierCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetidentifierAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
		}
	
        #endregion // identifier collection

		#region version accessor methods
		public int GetversionMinCount()
		{
			return 0;
		}

		public int versionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetversionMaxCount()
		{
			return 1;
		}

		public int versionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetversionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "version");
		}

		public int versionCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "version");
			}
		}

		public bool Hasversion()
		{
			return HasDomChild(NodeType.Attribute, "", "version");
		}

		public SchemaString GetversionAt(int index)
		{
            try
            {
                return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "version", index)));
            }
            catch
            {
                SchemaString s = new SchemaString("1.0"); // they didn't put in a version so default it to .0
                return s;
            }
		}

		public SchemaString Getversion()
		{
			return GetversionAt(0);
		}

		public SchemaString version
		{
			get
			{
				return GetversionAt(0);
			}
		}

		public void RemoveversionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "version", index);
		}

		public void Removeversion()
		{
			while (Hasversion())
				RemoveversionAt(0);
		}

		public void Addversion(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "version", newValue.ToString());
		}

		public void InsertversionAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "version", index, newValue.ToString());
		}

		public void ReplaceversionAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "version", index, newValue.ToString());
		}
		#endregion // version accessor methods

		#region version collection
		public versionCollection	Myversions = new versionCollection( );

		public class versionCollection: IEnumerable
		{
			manifestType parent;
			public manifestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public versionEnumerator GetEnumerator() 
			{
				return new versionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
		}

		public class versionEnumerator: IEnumerator 
		{
			int nIndex;
			manifestType parent;
			public versionEnumerator(manifestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.versionCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetversionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
		}
	
        #endregion // version collection

		#region base2 accessor methods
		public int Getbase2MinCount()
		{
			return 0;
		}

		public int base2MinCount
		{
			get
			{
				return 0;
			}
		}

		public int Getbase2MaxCount()
		{
			return 1;
		}

		public int base2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getbase2Count()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
		}

		public int base2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
			}
		}

		public bool Hasbase2()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
		}

		public SchemaString Getbase2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index)));
		}

		public SchemaString Getbase2()
		{
			return Getbase2At(0);
		}

		public SchemaString base2
		{
			get
			{
				return Getbase2At(0);
			}
		}

		public void Removebase2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index);
		}

		public void Removebase2()
		{
			while (Hasbase2())
				Removebase2At(0);
		}

		public void Addbase2(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", newValue.ToString());
		}

		public void Insertbase2At(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index, newValue.ToString());
		}

		public void Replacebase2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index, newValue.ToString());
		}
		#endregion // base2 accessor methods

		#region base2 collection
		public base2Collection	Mybase2s = new base2Collection( );

		public class base2Collection: IEnumerable
		{
			manifestType parent;
			public manifestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public base2Enumerator GetEnumerator() 
			{
				return new base2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
		}

		public class base2Enumerator: IEnumerator 
		{
			int nIndex;
			manifestType parent;
			public base2Enumerator(manifestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.base2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getbase2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
		}
	
        #endregion // base2 collection

		#region metadata accessor methods
		public int GetmetadataMinCount()
		{
			return 0;
		}

		public int metadataMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetmetadataMaxCount()
		{
			return 1;
		}

		public int metadataMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmetadataCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "metadata");
		}

		public int metadataCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "metadata");
			}
		}

		public bool Hasmetadata()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "metadata");
		}

		public metadataType GetmetadataAt(int index)
		{
			return new metadataType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "metadata", index));
		}

		public metadataType Getmetadata()
		{
			return GetmetadataAt(0);
		}

		public metadataType metadata
		{
			get
			{
				return GetmetadataAt(0);
			}
		}

		public void RemovemetadataAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "metadata", index);
		}

		public void Removemetadata()
		{
			while (Hasmetadata())
				RemovemetadataAt(0);
		}

		public void Addmetadata(metadataType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imscp_v1p1", "metadata", newValue);
		}

		public void InsertmetadataAt(metadataType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "metadata", index, newValue);
		}

		public void ReplacemetadataAt(metadataType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "metadata", index, newValue);
		}
		#endregion // metadata accessor methods

		#region metadata collection
		public metadataCollection	Mymetadatas = new metadataCollection( );

		public class metadataCollection: IEnumerable
		{
			manifestType parent;
			public manifestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public metadataEnumerator GetEnumerator() 
			{
				return new metadataEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
		}

		public class metadataEnumerator: IEnumerator 
		{
			int nIndex;
			manifestType parent;
			public metadataEnumerator(manifestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.metadataCount );
			}
			public metadataType  Current 
			{
				get 
				{
					return(parent.GetmetadataAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
		}
	
        #endregion // metadata collection

		#region organizations accessor methods
		public int GetorganizationsMinCount()
		{
			return 1;
		}

		public int organizationsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetorganizationsMaxCount()
		{
			return 1;
		}

		public int organizationsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetorganizationsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "organizations");
		}

		public int organizationsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "organizations");
			}
		}

		public bool Hasorganizations()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "organizations");
		}

		public organizationsType GetorganizationsAt(int index)
		{
			return new organizationsType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "organizations", index));
		}

		public organizationsType Getorganizations()
		{
			return GetorganizationsAt(0);
		}

		public organizationsType organizations
		{
			get
			{
				return GetorganizationsAt(0);
			}
		}

		public void RemoveorganizationsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "organizations", index);
		}

		public void Removeorganizations()
		{
			while (Hasorganizations())
				RemoveorganizationsAt(0);
		}

		public void Addorganizations(organizationsType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imscp_v1p1", "organizations", newValue);
		}

		public void InsertorganizationsAt(organizationsType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "organizations", index, newValue);
		}

		public void ReplaceorganizationsAt(organizationsType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "organizations", index, newValue);
		}
		#endregion // organizations accessor methods

		#region organizations collection
		public organizationsCollection	Myorganizationss = new organizationsCollection( );

		public class organizationsCollection: IEnumerable
		{
			manifestType parent;
			public manifestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public organizationsEnumerator GetEnumerator() 
			{
				return new organizationsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
		}

		public class organizationsEnumerator: IEnumerator 
		{
			int nIndex;
			manifestType parent;
			public organizationsEnumerator(manifestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.organizationsCount );
			}
			public organizationsType  Current 
			{
				get 
				{
					return(parent.GetorganizationsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
		}
	
        #endregion // organizations collection

		#region resources accessor methods
		public int GetresourcesMinCount()
		{
			return 1;
		}

		public int resourcesMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetresourcesMaxCount()
		{
			return 1;
		}

		public int resourcesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetresourcesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resources");
		}

		public int resourcesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resources");
			}
		}

		public bool Hasresources()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resources");
		}

		public resourcesType GetresourcesAt(int index)
		{
			return new resourcesType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resources", index));
		}

		public resourcesType Getresources()
		{
			return GetresourcesAt(0);
		}

		public resourcesType resources
		{
			get
			{
				return GetresourcesAt(0);
			}
		}

		public void RemoveresourcesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "resources", index);
		}

		public void Removeresources()
		{
			while (Hasresources())
				RemoveresourcesAt(0);
		}

		public void Addresources(resourcesType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imscp_v1p1", "resources", newValue);
		}

		public void InsertresourcesAt(resourcesType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "resources", index, newValue);
		}

		public void ReplaceresourcesAt(resourcesType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "resources", index, newValue);
		}
		#endregion // resources accessor methods

		#region resources collection
		public resourcesCollection	Myresourcess = new resourcesCollection( );

		public class resourcesCollection: IEnumerable
		{
			manifestType parent;
			public manifestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public resourcesEnumerator GetEnumerator() 
			{
				return new resourcesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
		}

		public class resourcesEnumerator: IEnumerator 
		{
			int nIndex;
			manifestType parent;
			public resourcesEnumerator(manifestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.resourcesCount );
			}
			public resourcesType  Current 
			{
				get 
				{
					return(parent.GetresourcesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
		}
	
        #endregion // resources collection

		#region manifest accessor methods
		public int GetmanifestMinCount()
		{
			return 0;
		}

		public int manifestMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetmanifestMaxCount()
		{
			return Int32.MaxValue;
		}

		public int manifestMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetmanifestCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "manifest");
		}

		public int manifestCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "manifest");
			}
		}

		public bool Hasmanifest()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "manifest");
		}

		public manifestType GetmanifestAt(int index)
		{
			return new manifestType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "manifest", index));
		}

		public manifestType Getmanifest()
		{
			return GetmanifestAt(0);
		}

		public manifestType manifest
		{
			get
			{
				return GetmanifestAt(0);
			}
		}

		public void RemovemanifestAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imscp_v1p1", "manifest", index);
		}

		public void Removemanifest()
		{
			while (Hasmanifest())
				RemovemanifestAt(0);
		}

		public void Addmanifest(manifestType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imscp_v1p1", "manifest", newValue);
		}

		public void InsertmanifestAt(manifestType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "manifest", index, newValue);
		}

		public void ReplacemanifestAt(manifestType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imscp_v1p1", "manifest", index, newValue);
		}
		#endregion // manifest accessor methods

		#region manifest collection
		public manifestCollection	Mymanifests = new manifestCollection( );

		public class manifestCollection: IEnumerable
		{
			manifestType parent;
			public manifestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public manifestEnumerator GetEnumerator() 
			{
				return new manifestEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
		}

		public class manifestEnumerator: IEnumerator 
		{
			int nIndex;
			manifestType parent;
			public manifestEnumerator(manifestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.manifestCount );
			}
			public manifestType  Current 
			{
				get 
				{
					return(parent.GetmanifestAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
		}
	
        #endregion // manifest collection

		protected virtual void SetCollectionParents()
		{
			Myidentifiers.Parent = this; 
			Myversions.Parent = this; 
			Mybase2s.Parent = this; 
			Mymetadatas.Parent = this; 
			Myorganizationss.Parent = this; 
			Myresourcess.Parent = this; 
			Mymanifests.Parent = this; 
		}
	}
}
