//
// taxonType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class taxonType : Altova.Node
	{
		#region Forward constructors
		public taxonType() : base() { SetCollectionParents(); }
		public taxonType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public taxonType(XmlNode node) : base(node) { SetCollectionParents(); }
		public taxonType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", i);
				InternalAdjustPrefix(DOMNode, true);
				new entryType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", i);
				InternalAdjustPrefix(DOMNode, true);
				new taxonType(DOMNode).AdjustPrefix();
			}
		}


		#region id accessor methods
		public int GetidMinCount()
		{
			return 0;
		}

		public int idMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetidMaxCount()
		{
			return 1;
		}

		public int idMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id");
		}

		public int idCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id");
			}
		}

		public bool Hasid()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id");
		}

		public idType GetidAt(int index)
		{
			return new idType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id", index)));
		}

		public idType Getid()
		{
			return GetidAt(0);
		}

		public idType id
		{
			get
			{
				return GetidAt(0);
			}
		}

		public void RemoveidAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id", index);
		}

		public void Removeid()
		{
			while (Hasid())
				RemoveidAt(0);
		}

		public void Addid(idType newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id", newValue.ToString());
		}

		public void InsertidAt(idType newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id", index, newValue.ToString());
		}

		public void ReplaceidAt(idType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "id", index, newValue.ToString());
		}
		#endregion // id accessor methods

		#region id collection
        public idCollection	Myids = new idCollection( );

        public class idCollection: IEnumerable
        {
            taxonType parent;
            public taxonType Parent
			{
				set
				{
					parent = value;
				}
			}
			public idEnumerator GetEnumerator() 
			{
				return new idEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class idEnumerator: IEnumerator 
        {
			int nIndex;
			taxonType parent;
			public idEnumerator(taxonType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.idCount );
			}
			public idType  Current 
			{
				get 
				{
					return(parent.GetidAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // id collection

		#region entry accessor methods
		public int GetentryMinCount()
		{
			return 0;
		}

		public int entryMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetentryMaxCount()
		{
			return 1;
		}

		public int entryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetentryCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
		}

		public int entryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
			}
		}

		public bool Hasentry()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry");
		}

		public entryType GetentryAt(int index)
		{
			return new entryType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index));
		}

		public entryType Getentry()
		{
			return GetentryAt(0);
		}

		public entryType entry
		{
			get
			{
				return GetentryAt(0);
			}
		}

		public void RemoveentryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index);
		}

		public void Removeentry()
		{
			while (Hasentry())
				RemoveentryAt(0);
		}

		public void Addentry(entryType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", newValue);
		}

		public void InsertentryAt(entryType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index, newValue);
		}

		public void ReplaceentryAt(entryType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "entry", index, newValue);
		}
		#endregion // entry accessor methods

		#region entry collection
        public entryCollection	Myentrys = new entryCollection( );

        public class entryCollection: IEnumerable
        {
            taxonType parent;
            public taxonType Parent
			{
				set
				{
					parent = value;
				}
			}
			public entryEnumerator GetEnumerator() 
			{
				return new entryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class entryEnumerator: IEnumerator 
        {
			int nIndex;
			taxonType parent;
			public entryEnumerator(taxonType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.entryCount );
			}
			public entryType  Current 
			{
				get 
				{
					return(parent.GetentryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // entry collection

		#region taxon accessor methods
		public int GettaxonMinCount()
		{
			return 0;
		}

		public int taxonMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GettaxonMaxCount()
		{
			return 1;
		}

		public int taxonMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettaxonCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
		}

		public int taxonCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
			}
		}

		public bool Hastaxon()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon");
		}

		public taxonType GettaxonAt(int index)
		{
			return new taxonType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index));
		}

		public taxonType Gettaxon()
		{
			return GettaxonAt(0);
		}

		public taxonType taxon
		{
			get
			{
				return GettaxonAt(0);
			}
		}

		public void RemovetaxonAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index);
		}

		public void Removetaxon()
		{
			while (Hastaxon())
				RemovetaxonAt(0);
		}

		public void Addtaxon(taxonType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", newValue);
		}

		public void InserttaxonAt(taxonType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index, newValue);
		}

		public void ReplacetaxonAt(taxonType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "taxon", index, newValue);
		}
		#endregion // taxon accessor methods

		#region taxon collection
        public taxonCollection	Mytaxons = new taxonCollection( );

        public class taxonCollection: IEnumerable
        {
            taxonType parent;
            public taxonType Parent
			{
				set
				{
					parent = value;
				}
			}
			public taxonEnumerator GetEnumerator() 
			{
				return new taxonEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class taxonEnumerator: IEnumerator 
        {
			int nIndex;
			taxonType parent;
			public taxonEnumerator(taxonType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.taxonCount );
			}
			public taxonType  Current 
			{
				get 
				{
					return(parent.GettaxonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // taxon collection

        private void SetCollectionParents()
        {
            Myids.Parent = this; 
            Myentrys.Parent = this; 
            Mytaxons.Parent = this; 
	}
}
}
