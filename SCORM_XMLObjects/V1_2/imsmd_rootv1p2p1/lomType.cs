//
// lomType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace imsmd_rootv1p2p1
{
	public class lomType : Altova.Node
	{
		#region Forward constructors
		public lomType() : base() { SetCollectionParents(); }
		public lomType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public lomType(XmlNode node) : base(node) { SetCollectionParents(); }
		public lomType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general", i);
				InternalAdjustPrefix(DOMNode, true);
				new generalType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle", i);
				InternalAdjustPrefix(DOMNode, true);
				new lifecycleType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata", i);
				InternalAdjustPrefix(DOMNode, true);
				new metametadataType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical", i);
				InternalAdjustPrefix(DOMNode, true);
				new technicalType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational", i);
				InternalAdjustPrefix(DOMNode, true);
				new educationalType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights", i);
				InternalAdjustPrefix(DOMNode, true);
				new rightsType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation", i);
				InternalAdjustPrefix(DOMNode, true);
				new relationType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation", i);
				InternalAdjustPrefix(DOMNode, true);
				new annotationType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification", i);
				InternalAdjustPrefix(DOMNode, true);
				new classificationType(DOMNode).AdjustPrefix();
			}
		}


		#region general accessor methods
		public int GetgeneralMinCount()
		{
			return 0;
		}

		public int generalMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetgeneralMaxCount()
		{
			return 1;
		}

		public int generalMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetgeneralCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general");
		}

		public int generalCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general");
			}
		}

		public bool Hasgeneral()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general");
		}

		public generalType GetgeneralAt(int index)
		{
			return new generalType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general", index));
		}

		public generalType Getgeneral()
		{
			return GetgeneralAt(0);
		}

		public generalType general
		{
			get
			{
				return GetgeneralAt(0);
			}
		}

		public void RemovegeneralAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general", index);
		}

		public void Removegeneral()
		{
			while (Hasgeneral())
				RemovegeneralAt(0);
		}

		public void Addgeneral(generalType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general", newValue);
		}

		public void InsertgeneralAt(generalType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general", index, newValue);
		}

		public void ReplacegeneralAt(generalType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "general", index, newValue);
		}
		#endregion // general accessor methods

		#region general collection
        public generalCollection	Mygenerals = new generalCollection( );

        public class generalCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public generalEnumerator GetEnumerator() 
			{
				return new generalEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class generalEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public generalEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.generalCount );
			}
			public generalType  Current 
			{
				get 
				{
					return(parent.GetgeneralAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // general collection

		#region lifecycle accessor methods
		public int GetlifecycleMinCount()
		{
			return 0;
		}

		public int lifecycleMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetlifecycleMaxCount()
		{
			return 1;
		}

		public int lifecycleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlifecycleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle");
		}

		public int lifecycleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle");
			}
		}

		public bool Haslifecycle()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle");
		}

		public lifecycleType GetlifecycleAt(int index)
		{
			return new lifecycleType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle", index));
		}

		public lifecycleType Getlifecycle()
		{
			return GetlifecycleAt(0);
		}

		public lifecycleType lifecycle
		{
			get
			{
				return GetlifecycleAt(0);
			}
		}

		public void RemovelifecycleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle", index);
		}

		public void Removelifecycle()
		{
			while (Haslifecycle())
				RemovelifecycleAt(0);
		}

		public void Addlifecycle(lifecycleType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle", newValue);
		}

		public void InsertlifecycleAt(lifecycleType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle", index, newValue);
		}

		public void ReplacelifecycleAt(lifecycleType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "lifecycle", index, newValue);
		}
		#endregion // lifecycle accessor methods

		#region lifecycle collection
        public lifecycleCollection	Mylifecycles = new lifecycleCollection( );

        public class lifecycleCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public lifecycleEnumerator GetEnumerator() 
			{
				return new lifecycleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class lifecycleEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public lifecycleEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.lifecycleCount );
			}
			public lifecycleType  Current 
			{
				get 
				{
					return(parent.GetlifecycleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // lifecycle collection

		#region metametadata accessor methods
		public int GetmetametadataMinCount()
		{
			return 0;
		}

		public int metametadataMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetmetametadataMaxCount()
		{
			return 1;
		}

		public int metametadataMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmetametadataCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata");
		}

		public int metametadataCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata");
			}
		}

		public bool Hasmetametadata()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata");
		}

		public metametadataType GetmetametadataAt(int index)
		{
			return new metametadataType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata", index));
		}

		public metametadataType Getmetametadata()
		{
			return GetmetametadataAt(0);
		}

		public metametadataType metametadata
		{
			get
			{
				return GetmetametadataAt(0);
			}
		}

		public void RemovemetametadataAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata", index);
		}

		public void Removemetametadata()
		{
			while (Hasmetametadata())
				RemovemetametadataAt(0);
		}

		public void Addmetametadata(metametadataType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata", newValue);
		}

		public void InsertmetametadataAt(metametadataType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata", index, newValue);
		}

		public void ReplacemetametadataAt(metametadataType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "metametadata", index, newValue);
		}
		#endregion // metametadata accessor methods

		#region metametadata collection
        public metametadataCollection	Mymetametadatas = new metametadataCollection( );

        public class metametadataCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public metametadataEnumerator GetEnumerator() 
			{
				return new metametadataEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class metametadataEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public metametadataEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.metametadataCount );
			}
			public metametadataType  Current 
			{
				get 
				{
					return(parent.GetmetametadataAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // metametadata collection

		#region technical accessor methods
		public int GettechnicalMinCount()
		{
			return 0;
		}

		public int technicalMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GettechnicalMaxCount()
		{
			return 1;
		}

		public int technicalMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettechnicalCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical");
		}

		public int technicalCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical");
			}
		}

		public bool Hastechnical()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical");
		}

		public technicalType GettechnicalAt(int index)
		{
			return new technicalType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical", index));
		}

		public technicalType Gettechnical()
		{
			return GettechnicalAt(0);
		}

		public technicalType technical
		{
			get
			{
				return GettechnicalAt(0);
			}
		}

		public void RemovetechnicalAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical", index);
		}

		public void Removetechnical()
		{
			while (Hastechnical())
				RemovetechnicalAt(0);
		}

		public void Addtechnical(technicalType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical", newValue);
		}

		public void InserttechnicalAt(technicalType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical", index, newValue);
		}

		public void ReplacetechnicalAt(technicalType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "technical", index, newValue);
		}
		#endregion // technical accessor methods

		#region technical collection
        public technicalCollection	Mytechnicals = new technicalCollection( );

        public class technicalCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public technicalEnumerator GetEnumerator() 
			{
				return new technicalEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class technicalEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public technicalEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.technicalCount );
			}
			public technicalType  Current 
			{
				get 
				{
					return(parent.GettechnicalAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // technical collection

		#region educational accessor methods
		public int GeteducationalMinCount()
		{
			return 0;
		}

		public int educationalMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GeteducationalMaxCount()
		{
			return 1;
		}

		public int educationalMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GeteducationalCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational");
		}

		public int educationalCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational");
			}
		}

		public bool Haseducational()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational");
		}

		public educationalType GeteducationalAt(int index)
		{
			return new educationalType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational", index));
		}

		public educationalType Geteducational()
		{
			return GeteducationalAt(0);
		}

		public educationalType educational
		{
			get
			{
				return GeteducationalAt(0);
			}
		}

		public void RemoveeducationalAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational", index);
		}

		public void Removeeducational()
		{
			while (Haseducational())
				RemoveeducationalAt(0);
		}

		public void Addeducational(educationalType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational", newValue);
		}

		public void InserteducationalAt(educationalType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational", index, newValue);
		}

		public void ReplaceeducationalAt(educationalType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "educational", index, newValue);
		}
		#endregion // educational accessor methods

		#region educational collection
        public educationalCollection	Myeducationals = new educationalCollection( );

        public class educationalCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public educationalEnumerator GetEnumerator() 
			{
				return new educationalEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class educationalEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public educationalEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.educationalCount );
			}
			public educationalType  Current 
			{
				get 
				{
					return(parent.GeteducationalAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // educational collection

		#region rights accessor methods
		public int GetrightsMinCount()
		{
			return 0;
		}

		public int rightsMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrightsMaxCount()
		{
			return 1;
		}

		public int rightsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetrightsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights");
		}

		public int rightsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights");
			}
		}

		public bool Hasrights()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights");
		}

		public rightsType GetrightsAt(int index)
		{
			return new rightsType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights", index));
		}

		public rightsType Getrights()
		{
			return GetrightsAt(0);
		}

		public rightsType rights
		{
			get
			{
				return GetrightsAt(0);
			}
		}

		public void RemoverightsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights", index);
		}

		public void Removerights()
		{
			while (Hasrights())
				RemoverightsAt(0);
		}

		public void Addrights(rightsType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights", newValue);
		}

		public void InsertrightsAt(rightsType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights", index, newValue);
		}

		public void ReplacerightsAt(rightsType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "rights", index, newValue);
		}
		#endregion // rights accessor methods

		#region rights collection
        public rightsCollection	Myrightss = new rightsCollection( );

        public class rightsCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public rightsEnumerator GetEnumerator() 
			{
				return new rightsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class rightsEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public rightsEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.rightsCount );
			}
			public rightsType  Current 
			{
				get 
				{
					return(parent.GetrightsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // rights collection

		#region relation accessor methods
		public int GetrelationMinCount()
		{
			return 0;
		}

		public int relationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetrelationMaxCount()
		{
			return Int32.MaxValue;
		}

		public int relationMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetrelationCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation");
		}

		public int relationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation");
			}
		}

		public bool Hasrelation()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation");
		}

		public relationType GetrelationAt(int index)
		{
			return new relationType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation", index));
		}

		public relationType Getrelation()
		{
			return GetrelationAt(0);
		}

		public relationType relation
		{
			get
			{
				return GetrelationAt(0);
			}
		}

		public void RemoverelationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation", index);
		}

		public void Removerelation()
		{
			while (Hasrelation())
				RemoverelationAt(0);
		}

		public void Addrelation(relationType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation", newValue);
		}

		public void InsertrelationAt(relationType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation", index, newValue);
		}

		public void ReplacerelationAt(relationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "relation", index, newValue);
		}
		#endregion // relation accessor methods

		#region relation collection
        public relationCollection	Myrelations = new relationCollection( );

        public class relationCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public relationEnumerator GetEnumerator() 
			{
				return new relationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class relationEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public relationEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.relationCount );
			}
			public relationType  Current 
			{
				get 
				{
					return(parent.GetrelationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // relation collection

		#region annotation accessor methods
		public int GetannotationMinCount()
		{
			return 0;
		}

		public int annotationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetannotationMaxCount()
		{
			return Int32.MaxValue;
		}

		public int annotationMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetannotationCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation");
		}

		public int annotationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation");
			}
		}

		public bool Hasannotation()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation");
		}

		public annotationType GetannotationAt(int index)
		{
			return new annotationType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation", index));
		}

		public annotationType Getannotation()
		{
			return GetannotationAt(0);
		}

		public annotationType annotation
		{
			get
			{
				return GetannotationAt(0);
			}
		}

		public void RemoveannotationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation", index);
		}

		public void Removeannotation()
		{
			while (Hasannotation())
				RemoveannotationAt(0);
		}

		public void Addannotation(annotationType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation", newValue);
		}

		public void InsertannotationAt(annotationType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation", index, newValue);
		}

		public void ReplaceannotationAt(annotationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "annotation", index, newValue);
		}
		#endregion // annotation accessor methods

		#region annotation collection
        public annotationCollection	Myannotations = new annotationCollection( );

        public class annotationCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public annotationEnumerator GetEnumerator() 
			{
				return new annotationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class annotationEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public annotationEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.annotationCount );
			}
			public annotationType  Current 
			{
				get 
				{
					return(parent.GetannotationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // annotation collection

		#region classification accessor methods
		public int GetclassificationMinCount()
		{
			return 0;
		}

		public int classificationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetclassificationMaxCount()
		{
			return Int32.MaxValue;
		}

		public int classificationMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetclassificationCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification");
		}

		public int classificationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification");
			}
		}

		public bool Hasclassification()
		{
			return HasDomChild(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification");
		}

		public classificationType GetclassificationAt(int index)
		{
			return new classificationType(GetDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification", index));
		}

		public classificationType Getclassification()
		{
			return GetclassificationAt(0);
		}

		public classificationType classification
		{
			get
			{
				return GetclassificationAt(0);
			}
		}

		public void RemoveclassificationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification", index);
		}

		public void Removeclassification()
		{
			while (Hasclassification())
				RemoveclassificationAt(0);
		}

		public void Addclassification(classificationType newValue)
		{
			AppendDomElement("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification", newValue);
		}

		public void InsertclassificationAt(classificationType newValue, int index)
		{
			InsertDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification", index, newValue);
		}

		public void ReplaceclassificationAt(classificationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsglobal.org/xsd/imsmd_rootv1p2p1", "classification", index, newValue);
		}
		#endregion // classification accessor methods

		#region classification collection
        public classificationCollection	Myclassifications = new classificationCollection( );

        public class classificationCollection: IEnumerable
        {
            lomType parent;
            public lomType Parent
			{
				set
				{
					parent = value;
				}
			}
			public classificationEnumerator GetEnumerator() 
			{
				return new classificationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class classificationEnumerator: IEnumerator 
        {
			int nIndex;
			lomType parent;
			public classificationEnumerator(lomType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.classificationCount );
			}
			public classificationType  Current 
			{
				get 
				{
					return(parent.GetclassificationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // classification collection

        private void SetCollectionParents()
        {
            Mygenerals.Parent = this; 
            Mylifecycles.Parent = this; 
            Mymetametadatas.Parent = this; 
            Mytechnicals.Parent = this; 
            Myeducationals.Parent = this; 
            Myrightss.Parent = this; 
            Myrelations.Parent = this; 
            Myannotations.Parent = this; 
            Myclassifications.Parent = this; 
	}
}
}
