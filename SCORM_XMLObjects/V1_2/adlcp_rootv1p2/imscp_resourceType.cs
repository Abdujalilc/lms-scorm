//
// imscp_resourceType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace adlcp_rootv1p2.imscp
{
	public class resourceType : Altova.Node
	{
		#region Forward constructors
		public resourceType() : base() { SetCollectionParents(); }
		public resourceType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public resourceType(XmlNode node) : base(node) { SetCollectionParents(); }
		public resourceType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Attribute, "", "identifier");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "identifier", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "type");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "type", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Attribute, "", "href");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "href", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata", i);
				InternalAdjustPrefix(DOMNode, false);
				new metadataType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file", i);
				InternalAdjustPrefix(DOMNode, false);
				new fileType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency", i);
				InternalAdjustPrefix(DOMNode, false);
				new dependencyType(DOMNode).AdjustPrefix();
			}
		}


		#region identifier accessor methods
		public int GetidentifierMinCount()
		{
			return 1;
		}

		public int identifierMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidentifierMaxCount()
		{
			return 1;
		}

		public int identifierMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidentifierCount()
		{
			return DomChildCount(NodeType.Attribute, "", "identifier");
		}

		public int identifierCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "identifier");
			}
		}

		public bool Hasidentifier()
		{
			return HasDomChild(NodeType.Attribute, "", "identifier");
		}

		public SchemaString GetidentifierAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "identifier", index)));
		}

		public SchemaString Getidentifier()
		{
			return GetidentifierAt(0);
		}

		public SchemaString identifier
		{
			get
			{
				return GetidentifierAt(0);
			}
		}

		public void RemoveidentifierAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "identifier", index);
		}

		public void Removeidentifier()
		{
			while (Hasidentifier())
				RemoveidentifierAt(0);
		}

		public void Addidentifier(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "identifier", newValue.ToString());
		}

		public void InsertidentifierAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "identifier", index, newValue.ToString());
		}

		public void ReplaceidentifierAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "identifier", index, newValue.ToString());
		}
		#endregion // identifier accessor methods

		#region identifier collection
        public identifierCollection	Myidentifiers = new identifierCollection( );

        public class identifierCollection: IEnumerable
        {
            resourceType parent;
            public resourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public identifierEnumerator GetEnumerator() 
			{
				return new identifierEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class identifierEnumerator: IEnumerator 
        {
			int nIndex;
			resourceType parent;
			public identifierEnumerator(resourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.identifierCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetidentifierAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // identifier collection

		#region type2 accessor methods
		public int Gettype2MinCount()
		{
			return 1;
		}

		public int type2MinCount
		{
			get
			{
				return 1;
			}
		}

		public int Gettype2MaxCount()
		{
			return 1;
		}

		public int type2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Gettype2Count()
		{
			return DomChildCount(NodeType.Attribute, "", "type");
		}

		public int type2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "type");
			}
		}

		public bool Hastype2()
		{
			return HasDomChild(NodeType.Attribute, "", "type");
		}

		public typeType Gettype2At(int index)
		{
			return new typeType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "type", index)));
		}

		public typeType Gettype2()
		{
			return Gettype2At(0);
		}

		public typeType type2
		{
			get
			{
				return Gettype2At(0);
			}
		}

		public void Removetype2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "type", index);
		}

		public void Removetype2()
		{
			while (Hastype2())
				Removetype2At(0);
		}

		public void Addtype2(typeType newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "type", newValue.ToString());
		}

		public void Inserttype2At(typeType newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}

		public void Replacetype2At(typeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}
		#endregion // type2 accessor methods

		#region type2 collection
        public type2Collection	Mytype2s = new type2Collection( );

        public class type2Collection: IEnumerable
        {
            resourceType parent;
            public resourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public type2Enumerator GetEnumerator() 
			{
				return new type2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class type2Enumerator: IEnumerator 
        {
			int nIndex;
			resourceType parent;
			public type2Enumerator(resourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.type2Count );
			}
			public typeType  Current 
			{
				get 
				{
					return(parent.Gettype2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // type2 collection

		#region base2 accessor methods
		public int Getbase2MinCount()
		{
			return 0;
		}

		public int base2MinCount
		{
			get
			{
				return 0;
			}
		}

		public int Getbase2MaxCount()
		{
			return 1;
		}

		public int base2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getbase2Count()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
		}

		public int base2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
			}
		}

		public bool Hasbase2()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base");
		}

		public SchemaString Getbase2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index)));
		}

		public SchemaString Getbase2()
		{
			return Getbase2At(0);
		}

		public SchemaString base2
		{
			get
			{
				return Getbase2At(0);
			}
		}

		public void Removebase2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index);
		}

		public void Removebase2()
		{
			while (Hasbase2())
				Removebase2At(0);
		}

		public void Addbase2(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", newValue.ToString());
		}

		public void Insertbase2At(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index, newValue.ToString());
		}

		public void Replacebase2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/XML/1998/namespace", "base", index, newValue.ToString());
		}
		#endregion // base2 accessor methods

		#region base2 collection
        public base2Collection	Mybase2s = new base2Collection( );

        public class base2Collection: IEnumerable
        {
            resourceType parent;
            public resourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public base2Enumerator GetEnumerator() 
			{
				return new base2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class base2Enumerator: IEnumerator 
        {
			int nIndex;
			resourceType parent;
			public base2Enumerator(resourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.base2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getbase2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // base2 collection

		#region href accessor methods
		public int GethrefMinCount()
		{
			return 0;
		}

		public int hrefMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GethrefMaxCount()
		{
			return 1;
		}

		public int hrefMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GethrefCount()
		{
			return DomChildCount(NodeType.Attribute, "", "href");
		}

		public int hrefCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "href");
			}
		}

		public bool Hashref()
		{
			return HasDomChild(NodeType.Attribute, "", "href");
		}

		public hrefType2 GethrefAt(int index)
		{
			return new hrefType2(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "href", index)));
		}

		public hrefType2 Gethref()
		{
			return GethrefAt(0);
		}

		public hrefType2 href
		{
			get
			{
				return GethrefAt(0);
			}
		}

		public void RemovehrefAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "href", index);
		}

		public void Removehref()
		{
			while (Hashref())
				RemovehrefAt(0);
		}

		public void Addhref(hrefType2 newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "href", newValue.ToString());
		}

		public void InserthrefAt(hrefType2 newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "href", index, newValue.ToString());
		}

		public void ReplacehrefAt(hrefType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "href", index, newValue.ToString());
		}
		#endregion // href accessor methods

		#region href collection
        public hrefCollection	Myhrefs = new hrefCollection( );

        public class hrefCollection: IEnumerable
        {
            resourceType parent;
            public resourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public hrefEnumerator GetEnumerator() 
			{
				return new hrefEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class hrefEnumerator: IEnumerator 
        {
			int nIndex;
			resourceType parent;
			public hrefEnumerator(resourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.hrefCount );
			}
			public hrefType2  Current 
			{
				get 
				{
					return(parent.GethrefAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // href collection

		



		#region metadata accessor methods
		public int GetmetadataMinCount()
		{
			return 0;
		}

		public int metadataMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetmetadataMaxCount()
		{
			return 1;
		}

		public int metadataMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmetadataCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata");
		}

		public int metadataCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata");
			}
		}

		public bool Hasmetadata()
		{
			return HasDomChild(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata");
		}

		public adlcp_metadataType GetmetadataAt(int index)
		{
			return new adlcp_metadataType(GetDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata", index));
		}

		public adlcp_metadataType Getmetadata()
		{
			return GetmetadataAt(0);
		}

		public adlcp_metadataType metadata
		{
			get
			{
				return GetmetadataAt(0);
			}
		}

		public void RemovemetadataAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata", index);
		}

		public void Removemetadata()
		{
			while (Hasmetadata())
				RemovemetadataAt(0);
		}

		public void Addmetadata(metadataType newValue)
		{
			AppendDomElement("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata", newValue);
		}

		public void InsertmetadataAt(metadataType newValue, int index)
		{
			InsertDomElementAt("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata", index, newValue);
		}

		public void ReplacemetadataAt(metadataType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "metadata", index, newValue);
		}
		#endregion // metadata accessor methods

		#region metadata collection
        public metadataCollection	Mymetadatas = new metadataCollection( );

        public class metadataCollection: IEnumerable
        {
            resourceType parent;
            public resourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public metadataEnumerator GetEnumerator() 
			{
				return new metadataEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class metadataEnumerator: IEnumerator 
        {
			int nIndex;
			resourceType parent;
			public metadataEnumerator(resourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.metadataCount );
			}
			public metadataType  Current 
			{
				get 
				{
					return(parent.GetmetadataAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // metadata collection

		#region file accessor methods
		public int GetfileMinCount()
		{
			return 0;
		}

		public int fileMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetfileMaxCount()
		{
			return Int32.MaxValue;
		}

		public int fileMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetfileCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file");
		}

		public int fileCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file");
			}
		}

		public bool Hasfile()
		{
			return HasDomChild(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file");
		}

		public fileType GetfileAt(int index)
		{
			return new fileType(GetDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file", index));
		}

		public fileType Getfile()
		{
			return GetfileAt(0);
		}

		public fileType file
		{
			get
			{
				return GetfileAt(0);
			}
		}

		public void RemovefileAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file", index);
		}

		public void Removefile()
		{
			while (Hasfile())
				RemovefileAt(0);
		}

		public void Addfile(fileType newValue)
		{
			AppendDomElement("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file", newValue);
		}

		public void InsertfileAt(fileType newValue, int index)
		{
			InsertDomElementAt("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file", index, newValue);
		}

		public void ReplacefileAt(fileType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "file", index, newValue);
		}
		#endregion // file accessor methods

		#region file collection
        public fileCollection	Myfiles = new fileCollection( );

        public class fileCollection: IEnumerable
        {
            resourceType parent;
            public resourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public fileEnumerator GetEnumerator() 
			{
				return new fileEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class fileEnumerator: IEnumerator 
        {
			int nIndex;
			resourceType parent;
			public fileEnumerator(resourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.fileCount );
			}
			public fileType  Current 
			{
				get 
				{
					return(parent.GetfileAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // file collection

		#region dependency accessor methods
		public int GetdependencyMinCount()
		{
			return 0;
		}

		public int dependencyMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetdependencyMaxCount()
		{
			return Int32.MaxValue;
		}

		public int dependencyMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetdependencyCount()
		{
			return DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency");
		}

		public int dependencyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency");
			}
		}

		public bool Hasdependency()
		{
			return HasDomChild(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency");
		}

		public dependencyType GetdependencyAt(int index)
		{
			return new dependencyType(GetDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency", index));
		}

		public dependencyType Getdependency()
		{
			return GetdependencyAt(0);
		}

		public dependencyType dependency
		{
			get
			{
				return GetdependencyAt(0);
			}
		}

		public void RemovedependencyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency", index);
		}

		public void Removedependency()
		{
			while (Hasdependency())
				RemovedependencyAt(0);
		}

		public void Adddependency(dependencyType newValue)
		{
			AppendDomElement("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency", newValue);
		}

		public void InsertdependencyAt(dependencyType newValue, int index)
		{
			InsertDomElementAt("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency", index, newValue);
		}

		public void ReplacedependencyAt(dependencyType newValue, int index)
		{
			ReplaceDomElementAt("http://www.imsproject.org/xsd/imscp_rootv1p1p2", "dependency", index, newValue);
		}
		#endregion // dependency accessor methods

		#region dependency collection
        public dependencyCollection	Mydependencys = new dependencyCollection( );

        public class dependencyCollection: IEnumerable
        {
            resourceType parent;
            public resourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public dependencyEnumerator GetEnumerator() 
			{
				return new dependencyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class dependencyEnumerator: IEnumerator 
        {
			int nIndex;
			resourceType parent;
			public dependencyEnumerator(resourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.dependencyCount );
			}
			public dependencyType  Current 
			{
				get 
				{
					return(parent.GetdependencyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // dependency collection
		
			



        protected virtual void SetCollectionParents()
        {
            Myidentifiers.Parent = this; 
            Mytype2s.Parent = this; 
            Mybase2s.Parent = this; 
            Myhrefs.Parent = this; 
            Mymetadatas.Parent = this; 
            Myfiles.Parent = this; 
            Mydependencys.Parent = this; 
		
	}
}
}
